<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Zadjad Rezai.</title><link>https://zrezai-dev.de/posts/</link><description>Recent content in Posts on Zadjad Rezai.</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Sat, 22 Aug 2020 08:29:42 +0000</lastBuildDate><atom:link href="https://zrezai-dev.de/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Projekt 1 - Docker Swarm, Traefik, Nextcloud und einiges mehr</title><link>https://zrezai-dev.de/projekt/traefik-nextcloud-docker-swarm/</link><pubDate>Sat, 22 Aug 2020 08:29:42 +0000</pubDate><guid>https://zrezai-dev.de/projekt/traefik-nextcloud-docker-swarm/</guid><description>Einf√ºhrung Diese Webseite zrezai-dev.de wird momentan √ºber einen kleinen Provider names wint.global in die sch√∂ne, weite Welt √ºbertragen. Dazwischen sitzt momentan Cloudflare als nameserver &amp;amp; damit kann ich direkt √ºber dash.cloudflare.com auch auf meine DNS-Eintr√§ge zugreifen. So wird der gesamte Traffic durch Cloudflare geleitet (Proxy) und die &amp;ldquo;echte&amp;rdquo; IP-Adresse des Servers wird nicht bekannt gegeben.
Macht man ein traceroute oder tracert (Windows) auf zrezai-dev.de erh√§lt man die IP-Adresse eines Cloudflare-Servers.</description></item><item><title>Docker ‚Äì Teil 3: Eintauchen in komplexere Bereiche</title><link>https://zrezai-dev.de/container/docker-teil-3/</link><pubDate>Tue, 31 Mar 2020 08:29:42 +0000</pubDate><guid>https://zrezai-dev.de/container/docker-teil-3/</guid><description>Wie in Teil-2 versprochen, tauchen wir diesmal etwas tiefer in Docker ein, verbessern und erweitern unsere App.
Das Repository basiert jetzt auf verschiedenen Branches, die jeweils mit einem Blogpost zusammen h√§ngen. Aktuell gibt es die Branch step-2, und step-3 welcher mit Teil 2 bzw. Teil 3 der Docker-Serie zusammenh√§ngen.
Docker Funktionsweise In Teil-1 bin ich teilweise auf die Ziele von Docker eingegangen, jedoch habe ich au√üen vor gelassen wie das ganze √ºberhaupt funktioniert.</description></item><item><title>Docker ‚Äì Teil 2: Eigene REST API</title><link>https://zrezai-dev.de/container/docker-rest-apis-teil-2/</link><pubDate>Wed, 25 Mar 2020 20:16:43 +0000</pubDate><guid>https://zrezai-dev.de/container/docker-rest-apis-teil-2/</guid><description>Um die Simplizit√§t von Docker zu erl√§utern, m√∂chte ich eine kleine Python-Anwendung erstellen, welche wir √ºber Docker ver√∂ffentlichen und nutzen k√∂nnen. Der Code sollte ab Python 3.6 funktionieren und ist auf meinem Github-Repo einsehbar. F√ºr eine Einf√ºhrung in
Flask, schaut euch das offizielle Tutorial an.
Im ersten Schritt soll nur eine simple API geschrieben werden, welche beim Aufrufen von /response/&amp;lt;string&amp;gt; den angegeben String als Antwort zur√ºcksenden.
Bevor wir beginnen sollten folgende Pakete installiert werden: pytest, flask</description></item><item><title>Docker ‚Äì Teil 1: Eine Einf√ºhrung.</title><link>https://zrezai-dev.de/container/docker-teil-1-eine-einfuehrung/</link><pubDate>Wed, 25 Mar 2020 20:16:33 +0000</pubDate><guid>https://zrezai-dev.de/container/docker-teil-1-eine-einfuehrung/</guid><description>Foto von Kyohei Ito In diesem ersten Post, m√∂chte ich Docker grob vorstellen und im n√§chsten Teil eine Beispielanwendung ver√∂ffentlichen.
Docker ist eine interessante technische Entwicklung, welche uns zeigt, dass wir uns aktuell in jeder Ebene in die selbe Richtung bewegen ‚Äì immer weiter in die Abstraktion von Komplexit√§t.
Bevor ich auf Docker selbst eingehe, m√∂chte ich einige Gedanken zur Grundlegenden √úberlegung los werden. Seit Jahren sieht die Bewegung auf dem technischen Markt gleich aus: Abstraktion.</description></item><item><title>Warum Test-Driven Development</title><link>https://zrezai-dev.de/methodik/warum-tdd/</link><pubDate>Tue, 17 Dec 2019 10:48:26 +0000</pubDate><guid>https://zrezai-dev.de/methodik/warum-tdd/</guid><description>Im Leben kommt man immer irgendwann an einen Punkt an, an dem man sich denkt: Wie kann ich mich verbessern?
Unser Leben kann teilweise mit einer Zusammensetzung vieler Microservices verglichen werden, auf die ich voraussichtlich in einem anderen Post eingehen werde. In (sehr) kurz; ein Microservice ist wie der Name schon sagt ein kleiner (Definitionssache) Service, der unabh√§ngig vom Rest funktioniert. Ein kleines Beispiel; ein Baum funktioniert auch, wenn kein Mensch damit interagiert, obwohl wir alle Teil unseres komplexen √ñkosystems sind.</description></item><item><title>Pair Programming als Qualit√§tssicherungsma√ünahme</title><link>https://zrezai-dev.de/methodik/qualitatives-pair-programming/</link><pubDate>Wed, 06 Nov 2019 18:10:09 +0000</pubDate><guid>https://zrezai-dev.de/methodik/qualitatives-pair-programming/</guid><description>Wer so wie die Person auf dem Bild arbeitet, sollte sich diesen Beitrag dringend durchlesen.
Pair Programming wird in vielen Ebenen der Enterprise-Software-Entwicklung genutzt, gelebt, geliebt und manchmal auch gehasst.
Ein sch√∂nes Werkzeuge der agilen Software-Entwicklung bildet das Pair Programming, mit seinem intelligenten Ansatz das ‚ÄûVier-Augen-Prinzip‚Äú auf eine geistig anstrengende Aufgabe anzuwenden.
Meiner Erfahrung nach wird man in traditionellen, deutschen Unternehmen nicht besonders h√§ufig auf Projekte, in denen Pair Programming gelebt wird, treffen.</description></item><item><title>Der Walrus-Operator (Python 3.8)</title><link>https://zrezai-dev.de/python/walrus-operator/</link><pubDate>Tue, 29 Oct 2019 20:56:27 +0000</pubDate><guid>https://zrezai-dev.de/python/walrus-operator/</guid><description>Endlich ist er da. Der Walrus-Operator, eingef√ºhrt mit PEP 572 ‚Äî Assignment Expressions.
Der Walrus-Operator ist mein pers√∂nliches Highlight, da ich ihn immer gebraucht habe ‚Äì nur vorher wusste ich nicht wie sehr ich ihn gebraucht habe.
Er bringt eine riesen Erleichterung, macht unseren Code kompakter, lesbarer und nat√ºrlicher sch√∂ner (das Auge liest mit) üò¨
PEP 572 beschreibt die Syntax des Walrus-Operators meiner Meinung nach perfekt:
In most contexts where arbitrary Python expressions can be used, a&amp;nbsp;named expression&amp;nbsp;can appear.</description></item><item><title>PEP 8 ‚Äì Design f√ºr Vererbung</title><link>https://zrezai-dev.de/python/pep/pep-8-design/</link><pubDate>Fri, 15 Feb 2019 11:19:07 +0000</pubDate><guid>https://zrezai-dev.de/python/pep/pep-8-design/</guid><description>Das ist die Fortf√ºhrung des ersten Posts √ºber PEP 8.
Diesmal geht es ausschlie√ülich um einen generellen Designvorschlag, um ein gut geschriebenes Programm ver√∂ffentlichen zu k√∂nnen.
Im Kontext von PEP 8, ist dieser Beitrag unter Design for Inheritance zu finden.
Ab jetzt werden die Posts im Allgemeinen k√ºrzer, damit man diese leichter verarbeiten kann.
Entscheidet immer, ob die Methoden und Instanzvariablen einer Klasse (zusammenfassend: ‚ÄûAttribute‚Äú) √∂ffentlich oder nicht √∂ffentlich sein sollen.</description></item><item><title>PEP 8 ‚Äì Die Sch√∂nheit von Python</title><link>https://zrezai-dev.de/python/pep-8/</link><pubDate>Thu, 14 Feb 2019 08:05:49 +0000</pubDate><guid>https://zrezai-dev.de/python/pep-8/</guid><description>Mein erster Blog-Eintrag sollte ein Eintrag sein, den man immer und immer wieder erleben kann ‚Äì ein Eintrag, der nicht langweilig wird ‚Äì nun ja langweilig mag er werden, aber er sollte definitiv nicht so leicht zu merken sein, dass man in seiner professionellen Laufbahn nicht noch einmal drauf schauen m√∂chte. Als Python Enthusiast gibt es f√ºr mich kein besseres erstes Thema als ein PEP (Python Enhancement Proposal) ‚Äì zu Deutsch ‚ÄûVorschlag zur Python-Verbesserung‚Äú ‚Äì ein Designdokument, das der Python-Community Informationen liefert oder ein neues Feature f√ºr Python, seine Prozesse oder Umgebung beschreibt.</description></item></channel></rss>