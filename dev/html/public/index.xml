<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zadjad Rezai.</title><link>https://zrezai-dev.de/</link><description>Recent content on Zadjad Rezai.</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><lastBuildDate>Sat, 22 Aug 2020 08:29:42 +0000</lastBuildDate><atom:link href="https://zrezai-dev.de/index.xml" rel="self" type="application/rss+xml"/><item><title>Projekt 1 - Docker Swarm, Traefik, Nextcloud und einiges mehr</title><link>https://zrezai-dev.de/projekt/traefik-nextcloud-docker-swarm/</link><pubDate>Sat, 22 Aug 2020 08:29:42 +0000</pubDate><guid>https://zrezai-dev.de/projekt/traefik-nextcloud-docker-swarm/</guid><description>Zadjad Rezai. https://zrezai-dev.de/projekt/traefik-nextcloud-docker-swarm/ -&lt;h2 id="einführung">Einführung&lt;/h2>
&lt;p>Diese Webseite &lt;a href="https://zrezai-dev.de">zrezai-dev.de&lt;/a> wird momentan über einen kleinen Provider names &lt;code>wint.global&lt;/code> in die schöne, weite Welt übertragen. Dazwischen sitzt momentan &lt;code>Cloudflare&lt;/code> als &lt;code>nameserver&lt;/code> &amp;amp; damit kann ich direkt über &lt;a href="dash.cloudflare.com">dash.cloudflare.com&lt;/a> auch auf meine DNS-Einträge zugreifen. So wird der gesamte Traffic durch Cloudflare geleitet (Proxy) und die &amp;ldquo;echte&amp;rdquo; IP-Adresse des Servers wird nicht bekannt gegeben.&lt;/p>
&lt;p>Macht man ein &lt;code>traceroute&lt;/code> oder &lt;code>tracert&lt;/code> (Windows) auf &lt;code>zrezai-dev.de&lt;/code> erhält man die IP-Adresse eines &lt;code>Cloudflare&lt;/code>-Servers.&lt;/p>
&lt;pre>&lt;code>▶ traceroute zrezai-dev.de
traceroute: Warning: zrezai-dev.de has multiple addresses; using 104.31.93.242
traceroute to zrezai-dev.de (104.31.93.242), 64 hops max, 52 byte packets
1 fritz.box (192.168.178.1) 3.652 ms 2.836 ms 3.249 ms
2 lo1.pop107-asr.ipv4.wtnet.de (_____________) 4.197 ms 4.061 ms 4.007 ms
3 b107.graf-zahl.ipv4.wtnet.de (_____________) 3.150 ms 4.047 ms 4.249 ms
4 cloudflare.ham.ecix.net (193.42.155.58) 4.165 ms
ipv4.de-cix.ham.de.as13335.cloudflare.com (80.81.203.10) 4.115 ms 3.012 ms
5 104.31.93.242 (104.31.93.242) 4.388 ms 4.765 ms 3.415 ms
&lt;/code>&lt;/pre>&lt;p>Nun habe ich einen zweiten Server gemietet, möchte jedoch meine Domain weiterhin bei &lt;code>wint.global&lt;/code> behalten.&lt;/p>
&lt;h2 id="projektidee-und--ziel">Projektidee und -ziel&lt;/h2>
&lt;p>Mein Ziel ist es, verschiedene &lt;code>subdomains&lt;/code> unter meiner Domain &lt;code>zrezai-dev.de&lt;/code> zu haben, die nicht auf den Server von &lt;code>wint.global&lt;/code> verweisen, sondern auf den neuen Server bei einem anderen Anbieter.&lt;/p>
&lt;p>Bei dem anderen Anbieter habe ich eine simplen VPS (Virtual Private Server). Wenn ich darauf z. B. eine Webseite hosten möchte, muss ich die nötigen Pakete installieren &amp;amp; die gesamte Konfiguration selbst machen.&lt;/p>
&lt;p>Die simpelste Lösung verschiede Services unter einer Domain anzubieten, wäre einfach alles auf verschiedenen Ports laufen zu lassen - das ist aber meiner Meinung nach ziemlich unangenehm. &amp;ldquo;Versteckte&amp;rdquo; Services kann man ja so laufen lassen, aber sobald man z. B. &lt;code>Nextcloud&lt;/code> nutzen möchte, macht es schon Sinn, dass die Domain dann auch &lt;code>cloud.example.com&lt;/code> o. ä. heißt, anstatt &lt;code>example.com:6464&lt;/code>.&lt;/p>
&lt;p>Die Frage ist nun, wie kann ich am besten mehrere Subdomains mit der selben IP beliefern ohne kostenpflichtige Tools wie &lt;code>Plex&lt;/code> zu nutzen?&lt;/p>
&lt;h2 id="dns-cloudflare">DNS (Cloudflare)&lt;/h2>
&lt;p>Ganz grob gesehen, sieht jede Anfrage eines Nutzers in etwa so aus:&lt;/p>
&lt;p>&lt;img
src="https://zrezai-dev.de/img/projekt-1/hightlevel-overview-project-1.svg"
alt="High level overview"
width="100%" style="background-color: white"/>&lt;/p>
&lt;p>Der Nameserver, den ich momentan nutze, ist Cloudflare. Meine Domain
ist bei &lt;code>wint.global&lt;/code> registriert, jedoch verwalte ich alle DNS-Einträge über Cloudflare.&lt;/p>
&lt;p>Daher würde ein Browser den Weg gehen, den wir oben via &lt;code>traceroute&lt;/code> gegangen sind; von eurem &lt;code>Endgerät -&amp;gt; Router -&amp;gt; Cloudflare -&amp;gt; Cloudflare Proxy&lt;/code>.&lt;/p>
&lt;p>Dass die &lt;code>Proxy&lt;/code> dann meinen Server kontaktiert, &lt;code>Caching&lt;/code> und &lt;code>DDOS-Sicherung&lt;/code> betreibt, bemerkt ein Endnutzer gar nicht. Ist ja auch eigentlich gar nicht wichtig.&lt;/p>
&lt;p>Die Domain &lt;code>zrezai-dev.de&lt;/code> wird über die Cloudflare Proxy in die große weite Welt geschickt,
da die Einstellung in meinem Account so vorgenommen wurde.&lt;/p>
&lt;p>Einige Subdomains jedoch werden auf einen anderen Server weitergeleitet - mein neuer VPS.
Dieser benutzt Cloudflare nicht als Proxy - daher ist die IP auch bei einem &lt;code>traceroute&lt;/code>
direkt bekannt.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">▶ traceroute server.zrezai-dev.de
traceroute to server.zrezai-dev.de &lt;span style="color:#666">(&lt;/span>161.97.81.52&lt;span style="color:#666">)&lt;/span>, &lt;span style="color:#666">64&lt;/span> hops max, &lt;span style="color:#666">52&lt;/span> byte packets
&lt;span style="color:#666">1&lt;/span> fritz.box &lt;span style="color:#666">(&lt;/span>192.168.178.1&lt;span style="color:#666">)&lt;/span> 3.114 ms 2.880 ms 2.165 ms
&lt;span style="color:#666">2&lt;/span> lo1.pop107-asr.ipv4.wtnet.de &lt;span style="color:#666">(&lt;/span>_________&lt;span style="color:#666">)&lt;/span> 6.768 ms 4.007 ms 3.719 ms
&lt;span style="color:#666">3&lt;/span> b107.graf-zahl.ipv4.wtnet.de &lt;span style="color:#666">(&lt;/span>_________&lt;span style="color:#666">)&lt;/span> 4.883 ms 6.003 ms 3.956 ms
&lt;span style="color:#666">4&lt;/span> b379.bert.ipv4.wtnet.de &lt;span style="color:#666">(&lt;/span>_________&lt;span style="color:#666">)&lt;/span> 4.780 ms 9.000 ms 5.282 ms
&lt;span style="color:#666">5&lt;/span> ae60.edge1.hamburg1.level3.net &lt;span style="color:#666">(&lt;/span>62.67.25.117&lt;span style="color:#666">)&lt;/span> 5.600 ms 6.018 ms 4.385 ms
&lt;span style="color:#666">6&lt;/span> * * *
&lt;span style="color:#666">7&lt;/span> * * *
&lt;span style="color:#666">8&lt;/span> vmd57207.contaboserver.net &lt;span style="color:#666">(&lt;/span>161.97.81.52&lt;span style="color:#666">)&lt;/span> 17.931 ms !Z 17.919 ms !Z 17.092 ms !Z
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wie man sieht, gehört der Server zu &lt;code>contabo&lt;/code>.&lt;/p>
&lt;h3 id="ändern-der-dns-einträge">Ändern der DNS-Einträge&lt;/h3>
&lt;p>Im Normalfall haben wir die Möglichkeit unsere DNS-Einträge anzupassen.
Da Cloudflare diese Aufgabe für mich übernimmt, tue ich das auch bei Cloudflare.&lt;/p>
&lt;p>Dafür müssen wir mindestens einen &lt;code>A&lt;/code>-Eintrag hinzufügen - dieser verweist eine &lt;code>domain&lt;/code> auf eine &lt;code>IPv4&lt;/code>-Adresse. Für &lt;code>IPv6&lt;/code>-Weiterleitung benötigen wir noch einen &lt;code>AAAA&lt;/code>-Eintrag.&lt;/p>
&lt;p>Danach können wir &lt;code>CNAME&lt;/code>-Einträge definieren, um z. B. &lt;code>www.example.com&lt;/code> auf &lt;code>example.com&lt;/code>
weiterzuleiten.&lt;/p>
&lt;p>So siehen z. B. die Einträge für &lt;code>server.zrezai-dev.de&lt;/code> aus.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th align="left">Name&lt;/th>
&lt;th align="center">Inhalt&lt;/th>
&lt;th align="right">TTL&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td align="left">cloud&lt;/td>
&lt;td align="center">161.97.81.52&lt;/td>
&lt;td align="right">auto&lt;/td>
&lt;td>cloud.zrezai-dev.de -&amp;gt; 161.97.81.52&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AAAA&lt;/td>
&lt;td align="left">cloud&lt;/td>
&lt;td align="center">IPv6-Adresse..&lt;/td>
&lt;td align="right">auto&lt;/td>
&lt;td>cloud.zrezai-dev.de -&amp;gt; IPv6-Adresse&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CNAME&lt;/td>
&lt;td align="left">www.cloud&lt;/td>
&lt;td align="center">cloud.zrezai-dev.de&lt;/td>
&lt;td align="right">auto&lt;/td>
&lt;td>&lt;a href="http://www.cloud.zrezai-dev.de">www.cloud.zrezai-dev.de&lt;/a> -&amp;gt; cloud.zrezai-dev.de -&amp;gt; 161.97.81.52&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Nachdem das ganze eingestellt ist, muss unser Server damit umgehen können.
Die DNS-Einträge bringen alle Nutzer erstmal einfach direkt auf die IP unseres Servers - bis jetzt ist noch kein Service da.&lt;/p>
&lt;p>Da der Browser bei &lt;code>http&lt;/code>-Anfragen grundsätzlich auf Port &lt;code>80&lt;/code> schaut &amp;amp; bei &lt;code>https&lt;/code> auf Port &lt;code>443&lt;/code>, würde ein Nutzer, der jetzt &lt;code>https://server.zrezai-dev.de/&lt;/code> aufruft, einfach nach &lt;code>161.97.81.52:443&lt;/code> geschickt werden.&lt;/p>
&lt;p>Die offene Frage wäre jetzt:&lt;/p>
&lt;p>&lt;mark>&lt;strong>Was machen wir, wenn wir noch weitere Subdomains haben, aber keine weiteren Server kaufen wollen?&lt;/strong> - Gleichzeitig, möchte ich immer Port 80 &amp;amp; 443 nutzen&lt;/mark>&lt;/p>
&lt;p>An einem Server, kann man nicht den selben Port doppelt belegen, daher muss ein &lt;code>proxy&lt;/code> her.&lt;/p>
&lt;h2 id="proxy--edge-router">Proxy / Edge router&lt;/h2>
&lt;p>Es gibt einige gute Lösungen, die wir problemlos mit &lt;code>docker&lt;/code> nutzen könnten. Folgende z. B.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.haproxy.org/">&lt;code>HAProxy&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.envoyproxy.io/">&lt;code>Envoy&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.traefik.io/">&lt;code>Traefik&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/">&lt;code>Nginx reverse-proxy&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Zuerst habe ich das Projekt mit &lt;code>Nginx reverse-proxy&lt;/code> gelöst, aber mir gefiel die Anbindung an &lt;code>Let's Encrypt&lt;/code> nicht und außerdem gibt es wenige Anpassungen, die ich am &lt;code>reverse-proxy&lt;/code> hinzufügen konnte (ohne es unnötig komplex zu machen), weshalb ich mich für &lt;code>Traefik&lt;/code> entschieden habe.&lt;/p>
&lt;p>In naher Zukunft würden wir es aber höchstwahrscheinlich auf &lt;code>Envoy&lt;/code> ummünzen, da es &lt;a href="https://www.loggly.com/blog/benchmarking-5-popular-load-balancers-nginx-haproxy-envoy-traefik-and-alb/">im Benchmark&lt;/a> besser abgeschnitten hat.&lt;/p>
&lt;p>Ein &lt;code>reverse-proxy&lt;/code> - bzw. im Falle von &lt;code>Traefik&lt;/code> ein &lt;code>Edge Router&lt;/code> - beantwortet die große Frage von oben.&lt;/p>
&lt;p>Alle Anfragen treffen zuerst auf &lt;code>Traefik&lt;/code> &amp;amp; &lt;code>Traefik&lt;/code> schaut sich dann die Domain an, bewertet wohin die Anfrage weitergeleitet werden soll und antwortet danach dem Nutzer.&lt;/p>
&lt;figure>
&lt;img src="https://docs.traefik.io/assets/img/traefik-architecture.png" alt="my alt text"/>
&lt;figcaption>Traefik v2 Architektur (von https://docs.traefik.io/)&lt;/figcaption>
&lt;/figure>
&lt;p>Ich nutze &lt;code>Traefik&lt;/code> mit &lt;code>Docker Swarm&lt;/code> um eine &lt;code>Nextcloud&lt;/code>-Instanz und zwei Instanzen meiner Webseite zu erstellen. Die Instanzen der Webseite bekommen über den &lt;code>Traefik&lt;/code>-Loadbalancer die passende Menge an Anfragen zugespielt.&lt;/p>
&lt;p>&lt;code>Docker Swarm&lt;/code> hilft uns dabei immer eine bestimmte Menge an Instanzen zu haben - so wird sofort eine neue Instanz erstellt, sollte die alte Instanz kaputt gehen. Natürlich muss man darauf achten, dass ein Container niemals so wichtig ist, dass wir es nicht einfach wegwerfen können - &lt;a href="https://devops.stackexchange.com/questions/653/what-is-the-definition-of-cattle-not-pets">&lt;code>Pets vs. Cattle&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;h3 id="docker--docker-swarm">Docker &amp;amp; Docker swarm&lt;/h3>
&lt;p>Ich denke mittlerweile sollten alle Docker installiert haben, falls nicht, dann einfach den Anweisungen hier folgen: &lt;a href="https://docs.docker.com/get-docker/">https://docs.docker.com/get-docker/&lt;/a>)&lt;/p>
&lt;p>&lt;code>Docker swarm&lt;/code> kann man nutzen, wenn man möchte - muss man aber nicht! Falls also keine Replicas o. ä. benutzt werden sollen, reicht es einfach &lt;code>Docker&lt;/code> im normalen Modus zu belassen.&lt;/p>
&lt;p>Hier die aktuelle Dokumentation dazu: &lt;a href="https://docs.docker.com/engine/swarm/swarm-mode/">https://docs.docker.com/engine/swarm/swarm-mode/&lt;/a>&lt;/p>
&lt;p>Grundsätzlich, muss man nur folgenden Befehl eingeben &amp;amp; sich den Token irgendwo aufschreiben.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> docker swarm init
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sollte man mehrere Nodes haben, kann man über&lt;/p>
&lt;pre>&lt;code> docker swarm join --token ${TOKEN} ${IP}:${PORT}
&lt;/code>&lt;/pre>&lt;p>dem &lt;code>swarm&lt;/code> beitreten.&lt;/p>
&lt;h2 id="docker-compose-dateien">docker-compose Dateien&lt;/h2>
&lt;p>Grundsätzlich sieht mein Ordneraufbau so aus:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">.
|____traefik
| |____providers
| | |____file-provider.toml
| |____traefik.toml
| |____passwordfile
| |____tls.env
| |____Readme.md
| |____acme.json
| |____docker-compose.yaml
|
|____zrezai-dev
| |____dev
| | |____...
| | |____...
| |____Dockerfile.Hugo
| |____docker-compose.yaml
|
|____nexworking
| |____db.env
| |____redis.env
| |____nextcloud.env
| |____docker-compose.yaml
|
|____Taskfile.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>nexworking&lt;/code> steht für &lt;code>Nextcloud&lt;/code>. In den nächstne Schritten gehen wir einmal alle Daten durch.&lt;/p>
&lt;p>Der Gesamtaufbau sieht in etwa so aus:&lt;/p>
&lt;p>&lt;img
src="https://zrezai-dev.de/img/projekt-1/header.svg"
alt="Traefik high level overview"
width="100%" style="background-color: white"/>&lt;/p>
&lt;h3 id="webseite-hugo">Webseite (Hugo)&lt;/h3>
&lt;p>Für meine Webseite nutze ich Hugo, falls ihr etwas anderes benutzt, muss hier natürlich eines angepasst werden. Wenn ihr nur statisches &lt;code>html&lt;/code> habt, könnt ihr eigentlich alles genau so kopieren - nur der &lt;code>blog_builder&lt;/code> ist dann nicht mehr nötig.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#a2f;font-weight:bold">ARG&lt;/span> &lt;span style="color:#b8860b">ALPINE_VERSION&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">3&lt;/span>.12&lt;span style="">
&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">FROM&lt;/span>&lt;span style="color:#b44"> alpine:${ALPINE_VERSION} as hugobase&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">ENV&lt;/span> &lt;span style="color:#b8860b">HUGO_VERSION&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">0&lt;/span>.74.3&lt;span style="">
&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#b44"> /tmp&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">VOLUME&lt;/span> [ &lt;span style="color:#b44">&amp;#34;/tmp&amp;#34;&lt;/span> ]&lt;span style="">
&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#080;font-style:italic"># Install HUGO&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">RUN&lt;/span> &lt;span style="color:#a2f">set&lt;/span> -x &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> apk add --update wget ca-certificates libstdc++ libc6-compat &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> wget -q -O hugo.tar.gz https://github.com/gohugoio/hugo/releases/download/v&lt;span style="color:#b68;font-weight:bold">${&lt;/span>&lt;span style="color:#b8860b">HUGO_VERSION&lt;/span>&lt;span style="color:#b68;font-weight:bold">}&lt;/span>/hugo_extended_&lt;span style="color:#b68;font-weight:bold">${&lt;/span>&lt;span style="color:#b8860b">HUGO_VERSION&lt;/span>&lt;span style="color:#b68;font-weight:bold">}&lt;/span>_Linux-64bit.tar.gz &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> tar xzf hugo.tar.gz hugo &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> mv hugo /usr/bin &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#080;font-style:italic">## Cleanup&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> rm -r hugo.tar.gz &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> apk del wget ca-certificates &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> rm /var/cache/apk/*&lt;span style="">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Das Dockerfile ist recht minimalistisch - basierend auf Alpine, wird nur die aktuelle Version von &lt;code>Hugo&lt;/code> heruntergeladen und kann dann ausgeführt werden.&lt;/p>
&lt;p>Als &lt;code>Volume&lt;/code> definiere ich hier &lt;code>/tmp&lt;/code> - darin können wir mit der &lt;code>docker-compose&lt;/code> unsere Datein mounten &amp;amp; dann mit dem &lt;code>hugo&lt;/code>-command statische &lt;code>html&lt;/code>-Dateien erstellen.&lt;/p>
&lt;p>Das Image ist im Dockerhub hochgeladen und als &lt;code>xcalizorz:hugo:1.0-alpine&lt;/code> veröffentlicht - so können wir es mir &lt;code>Docker Swarm&lt;/code> oder &lt;code>Kubernetes&lt;/code> nutzen.&lt;/p>
&lt;p>Im nächsten Schritt beschreiben wir unsere &lt;code>docker-compose.yaml&lt;/code>&lt;/p>
&lt;p>&lt;strong>blog_builder&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#a2f;font-weight:bold">version&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b44">&amp;#34;3.8&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">services&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">blog_builder&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>xcalizorz/hugo:&lt;span style="color:#666">1.0&lt;/span>-alpine&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">placement&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">max_replicas_per_node&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">update_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">parallelism&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">delay&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>10s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">restart_policy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">condition&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>none&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.enable=&lt;span style="color:#a2f;font-weight:bold">false&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ./dev:/tmp&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">command&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>hugo&lt;span style="color:#bbb"> &lt;/span>--minify&lt;span style="color:#bbb"> &lt;/span>--baseUrl&lt;span style="color:#bbb"> &lt;/span>https://server.zrezai-dev.de/&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- web&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>...&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>..&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>.&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Der erste Service ist der &lt;code>blog_builder&lt;/code>, mit dem gegebenen Command &lt;code>hugo --minify --baseUrl https://server.zrezai-dev.de/&lt;/code> werden alle &lt;code>html&lt;/code>-Dateien erstellt und unter dem Ordner &lt;code>public&lt;/code> abgeworfen. So können dann andere Services auf den Ordner &lt;code>public&lt;/code> zugreifen, um dessen Inhalt zu veröffentlichen.&lt;/p>
&lt;p>Die Labels sind hier eigentlich unwichtig, da bei beiden einfach gesagt wird &lt;em>bitte ignorieren&lt;/em>. Dieser Service ist kurzlebig &amp;amp; endet, sobald der &lt;code>hugo&lt;/code>-Befehl beendet wurde.&lt;/p>
&lt;p>&lt;strong>blog&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#bbb"> &lt;/span>...&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>..&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>.&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">blog&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nginx:alpine&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">2&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">placement&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># sinnvoll bei vielen nodes &amp;amp; replicas&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">max_replicas_per_node&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">2&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># es ist besonders wichtig resourcen einzuschränken&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">limits&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">cpus&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b44">&amp;#39;0.05&amp;#39;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">memory&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>50M&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">update_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># updates immer nur nacheinander &amp;amp; mit 10 sek. Wartezeit&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">parallelism&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">delay&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>10s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">restart_policy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">condition&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>on-failure&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">delay&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>5s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">max_attempts&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">3&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">window&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>30s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># traefik wird diesen Service beachten/einbinden&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.enable=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Füge dem Router einen Service hinzu&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.blog.service=blogService&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Verlange tls-Verschlüsselung&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.blog.tls=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># zrezaiResolver wird in der traefik-config definiert&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.blog.tls.certresolver=zrezaiResolver&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Die Außenwelt greift über Port 443 (websecure) auf diesen Service zu&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.blog.entrypoints=websecure&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Das Docker Netzwerk wird an traefik weitergegeben&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.docker.network=web&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Da wir aktuell die simpelste Form von `nginx` nutzen, veröffentlichen wir nur auf Port 80 - `tls` etc. wird von `traefik` gemacht.&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.services.blogService.loadbalancer.server.port=&lt;span style="color:#666">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.services.blogService.loadbalancer.passhostheader=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.services.blogService.loadbalancer.sticky.cookie=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Die Domain, die hier her führen soll&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.blog.rule=Host(`server.zrezai-dev.de`)&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Alle Middlewares - werden bei Traefik definiert&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#b44">&amp;#34;traefik.http.routers.blog.middlewares=blogHeaders@file, simpleRatelimiter@file, simpleInflightreq@file&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- blog_builder&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Die generierten Daten unter `public` werden an nginx weitergegeben&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ./dev/public:/usr/share/nginx/html&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- web&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Es wird ein overlay Netzwerk kreiert&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">web&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">driver&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>overlay&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Wenn der Name fehlt, bekommt das Netzwerk einen Präfix!&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>web&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">driver_opts&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Das Netzwerk wird verschlüsselt&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">encrypted&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b44">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Resourcen einzuschränken ist enorm wichtig. Sollte es z. B. jemals dazu kommen, dass eines der Container eingenommen wird &amp;amp; man nicht automatisiert oder sofort reagiert, könnte der Container die gesamten Resourcen des Servers auffressen.&lt;/p>
&lt;p>In weiteren Posts werde ich mich etwas mehr mit Sicherheit befassen.
Grundsätzlich sind die Dinge, die wir jetzt sehen nicht unbedingt super &amp;ldquo;unsicher&amp;rdquo;, da alles auf isolierten Containern basiert und wir auf viele best practices achten, aber es geht natürlich immer besser.&lt;/p>
&lt;p>Weitere Daten brauchen wir für den Blog nicht.&lt;/p>
&lt;h3 id="nextcloud">Nextcloud&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#a2f;font-weight:bold">version&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b44">&amp;#34;3.8&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">services&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">db&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>postgres:alpine&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">placement&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">max_replicas_per_node&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">update_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">parallelism&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">delay&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>10s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">restart_policy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">condition&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>on-failure&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># traefik soll diesen Service ignorieren&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.enable=&lt;span style="color:#a2f;font-weight:bold">false&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nc_db:/var/lib/postgresql/data&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">env_file&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># alle environment variablen sind in db.env definiert&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- db.env&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nextcloud&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">nc_redis&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>redis:alpine&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">placement&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">max_replicas_per_node&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">update_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">parallelism&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">delay&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>10s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">restart_policy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">condition&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>on-failure&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># traefik soll diesen Service ignorieren&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.enable=&lt;span style="color:#a2f;font-weight:bold">false&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#666">6379&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nc_redis:/data&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- /etc/localtime:/etc/localtime:ro&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nextcloud&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">nextcloud&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nextcloud:apache&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># für Apache&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">hostname&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>cloud.zrezai-dev.de&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">placement&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">max_replicas_per_node&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">2&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">resources&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">limits&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">cpus&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b44">&amp;#39;0.50&amp;#39;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Nextcloud hätte gerne 128MB bis 512MB RAM&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">memory&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>512M&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">update_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">parallelism&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">delay&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>10s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">restart_policy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">condition&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>on-failure&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># traefik soll diesen service beachten&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.enable=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># es soll ein Zertifikat ausgestellt werden&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.nextcloud.service=nextcloudService&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.nextcloud.tls=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.nextcloud.tls.certresolver=zrezaiResolver&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># die Außenwelt greift über Port 443 (websecure) auf diesen Service zu&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.nextcloud.entrypoints=websecure&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># das Docker Netzwerk wird an traefik weitergegeben&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.docker.network=nextcloud&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.services.nextcloudService.loadbalancer.server.port=&lt;span style="color:#666">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.services.nextcloudService.loadbalancer.passhostheader=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.services.nextcloudService.loadbalancer.sticky.cookie=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Einstellungen damit caldav funktioniert&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.middlewares.nextcloud-caldav.redirectregex.permanent=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.middlewares.nextcloud-caldav.redirectregex.regex=^https://(.&lt;span style="color:#080">*)/.well-known/(card|cal)dav&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.middlewares.nextcloud-caldav.redirectregex.replacement=https://$${&lt;span style="color:#666">1&lt;/span>}/remote.php/dav/&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># alle Middlewares - werden bei Traefik definiert&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#b44">&amp;#34;traefik.http.routers.nextcloud.middlewares=nextcloud-caldav@docker, nextcloudHeaders@file, nextcloudRatelimiter@file&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># die Domain, die hier her führen soll&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.nextcloud.rule=Host(`cloud.zrezai-dev.de`)&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nextcloud:/var/www/html&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">env_file&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># alle wichtigen env. variablen&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- db.env&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- redis.env&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nextcloud.env&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- db&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nc_redis&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nextcloud&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">nextcloud&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">nc_db&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">nc_redis&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># es wird ein overlay Netzwerk kreiert&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">nextcloud&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>nextcloud&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">driver&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>overlay&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">driver_opts&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># verschlüsselt&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">encrypted&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b44">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="env-files">Env. files&lt;/h4>
&lt;p>Es gibt insgesamt drei &lt;code>.env&lt;/code>-Dateien.&lt;/p>
&lt;pre>&lt;code>|____nexworking
| |____db.env
| |____redis.env
| |____nextcloud.env
| |____docker-compose.yaml
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#080;font-style:italic"># db.env&lt;/span>
&lt;span style="color:#b44">POSTGRES_PASSWORD&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">SamplePassword123&lt;/span>
&lt;span style="color:#b44">POSTGRES_DB&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">db_name&lt;/span>
&lt;span style="color:#b44">POSTGRES_USER&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">db_user&lt;/span>
&lt;span style="color:#b44">POSTGRES_HOST&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">nextcloud-stack_nc_db&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Beim &lt;code>POSTGRES_HOST&lt;/code> kommt es darauf an wie der Datenbank Service und der &lt;code>docker swarm&lt;/code> stack heißt.&lt;/p>
&lt;p>Bei mir heißt der Datenbank Service &lt;code>nc_db&lt;/code> und der &lt;code>stack&lt;/code> heißt &lt;code>nextcloud-stack&lt;/code> -&amp;gt; &lt;code>nextcloud-stack_nc_db&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#080;font-style:italic"># redis.env&lt;/span>
&lt;span style="color:#b44">REDIS_HOST&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">nextcloud-stack_nc_redis&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hier gilt das gleiche wie bei &lt;code>POSTGRES_HOST&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#080;font-style:italic"># nextcloud.env&lt;/span>
&lt;span style="color:#b44">NEXTCLOUD_ADMIN_USER&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">admin&lt;/span>
&lt;span style="color:#b44">NEXTCLOUD_ADMIN_PASSWORD&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">NextcloudPassword&lt;/span>
&lt;span style="color:#080;font-style:italic"># alle Domänen mit Leerzeichen getrennt&lt;/span>
&lt;span style="color:#b44">NEXTCLOUD_TRUSTED_DOMAINS&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">www.cloud.zrezai-dev.de cloud.zrezai-dev.de&lt;/span>
&lt;span style="color:#080;font-style:italic"># wir wollen nur über https kommunizieren&lt;/span>
&lt;span style="color:#b44">OVERWRITEPROTOCOL&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">https&lt;/span>
&lt;span style="color:#080;font-style:italic"># hier kann man noch vielese mehr hinzufügen&lt;/span>
&lt;span style="color:#080;font-style:italic">## z. B. SMTP Server, um E-Mails zu versenden&lt;/span>
&lt;span style="color:#080;font-style:italic">## Gerne in die Nextcloud Doku. schauen&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="traefik">Traefik&lt;/h3>
&lt;p>Jetzt kommen wir zum aller wichtigsten.&lt;/p>
&lt;pre>&lt;code>.
|____traefik
| |____providers
| | |____file-provider.toml
| |____traefik.toml
| |____passwordfile
| |____tls.env
| |____acme.json
| |____docker-compose.yaml
&lt;/code>&lt;/pre>&lt;p>Gehen wir schrittweise durch &lt;code>docker-compose.yaml&lt;/code>, um zu verstehen wozu die ganzen anderen Daten gut sind.&lt;/p>
&lt;h4 id="docker-composeyaml">docker-compose.yaml&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#a2f;font-weight:bold">version&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b44">&amp;#34;3.8&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">services&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">traefikRouter&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>traefik:v2&lt;span style="color:#666">.2&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">depends_on&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- dockerproxy&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">placement&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">constraints&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># traefik sollte auf der manager node laufen&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- node.role&lt;span style="color:#bbb"> &lt;/span>==&lt;span style="color:#bbb"> &lt;/span>manager&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># aktuell möchte ich es nur einmal haben&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">replicas&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">restart_policy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">condition&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>on-failure&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">delay&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>5s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">max_attempts&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">3&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">window&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>30s&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.enable=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.docker.network=traefik-network&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># das Dashboard soll unter `traefik.zrezai-dev.de` erreichbar sein&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.traefikRouter.rule=Host(`traefik.zrezai-dev.de`)&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># entrypoint ist `traefik` (Port 8080)&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.traefikRouter.entrypoints=traefik&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># ein Zertifikat soll erstellt werden&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.traefikRouter.tls=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.traefikRouter.tls.certresolver=zrezaiResolver&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># api@interal ist ein interner Service, den wir nutzen wollen&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.routers.traefikRouter.service=api@internal&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Alle middlewares - definition kommt gleich&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#b44">&amp;#34;traefik.http.routers.traefikRouter.middlewares=auth@file, simpleHeaders@file&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># dummy service für Swarm port detection. Der Port ist egal.&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.http.services.dummy-svc.loadbalancer.server.port=&lt;span style="color:#666">9999&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># globaler redirect to https&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#b44">&amp;#34;traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#b44">&amp;#34;traefik.http.routers.http-catchall.entrypoints=web&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#b44">&amp;#34;traefik.http.routers.http-catchall.middlewares=redirect-to-https&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#b44">&amp;#34;traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># wir wollen unter Port 80, 443 und 8080 kontaktiert werden (entrypoints)&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#666">80&lt;/span>:&lt;span style="color:#666">80&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#666">443&lt;/span>:&lt;span style="color:#666">443&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#666">8080&lt;/span>:&lt;span style="color:#666">8080&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># die Konfigurationsdatei für traefik&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ./traefik.toml:/traefik.toml&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># hierin werden die tls Zertifikate gespeichert&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ./acme.json:/acme.json&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># unser admin user &amp;amp; gehashtes Password für das Dashbord&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ./passwordfile:/var/passwordfile&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># extra Konfigurationen (für z. B. Middlewares)&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ./providers:/providers&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">env_file&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># env. variablen für Cloudflare TLS (nicht nötig, wenn wir HTTP Verifikation nutzen)&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- ./tls.env&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik-network&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- web&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- nextcloud&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># ein docker proxy - dieser ist von der Außenwelt nicht erreichbar&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># nur der dockerproxy hat Zugriff auf unseren Docker Socket (Sicherheitsrisiko)&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Traefik greift über Anfragen auf diesen Container dann auf unser Socket zu&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Sollte Traefik je angegriffen werden, ist es etwas schwieriger vollen&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Zugriff auf unseren Docker Socket zu bekommen&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic">##&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Wenn jemand Zugriff auf Docker hat, hat er auch quasi vollen Zugriff&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># auf den Hostserver (!)&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">dockerproxy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">environment&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">CONTAINERS&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">NETWORKS&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">SERVICES&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">TASKS&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#666">1&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">image&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>tecnativa/docker-socket-proxy&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">labels&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik.enable=&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- traefik-network&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">ports&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#666">2375&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">volumes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- /var/run/docker.sock:/var/run/docker.sock&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">networks&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Integration der beiden anderen Netzwerke&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#080;font-style:italic"># Traefik kann sonst nicht auf die Services darin zugreifen&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">web&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">external&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">nextcloud&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">external&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">traefik-network&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">driver&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>overlay&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>traefik-network&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">driver_opts&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#a2f;font-weight:bold">encrypted&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#b44">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="traefiktoml">traefik.toml&lt;/h4>
&lt;p>Ich habe einige Kommentare entfernt, damit es nicht zu lang wird.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Global configuration&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
[global]
checkNewVersion = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
sendAnonymousUsage = &lt;span style="color:#a2f;font-weight:bold">false&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Entrypoints configuration&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Entrypoints definition&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Optional&lt;/span>
&lt;span style="color:#080;font-style:italic"># Default:&lt;/span>
[entryPoints]
[entryPoints.web]
address = &lt;span style="color:#b44">&amp;#34;:80&amp;#34;&lt;/span>
[entryPoints.websecure]
address = &lt;span style="color:#b44">&amp;#34;:443&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Traefik logs configuration&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Traefik logs&lt;/span>
&lt;span style="color:#080;font-style:italic"># Enabled by default and log to stdout&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Optional&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
[log]
level = &lt;span style="color:#b44">&amp;#34;ERROR&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Access logs configuration&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Enable access logs&lt;/span>
&lt;span style="color:#080;font-style:italic"># By default it will write to stdout and produce logs in the textual&lt;/span>
&lt;span style="color:#080;font-style:italic"># Common Log Format (CLF), extended with additional fields.&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Optional&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
[accessLog]
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># API and dashboard configuration&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Enable API and dashboard&lt;/span>
[api]
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Ping configuration&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Enable ping&lt;/span>
[ping]
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Docker configuration backend&lt;/span>
&lt;span style="color:#080;font-style:italic">################################################################&lt;/span>
&lt;span style="color:#080;font-style:italic"># Enable Docker configuration backend&lt;/span>
[providers.docker]
endpoint = &lt;span style="color:#b44">&amp;#34;tcp://dockerproxy:2375&amp;#34;&lt;/span>
network = &lt;span style="color:#b44">&amp;#34;traefik-network&amp;#34;&lt;/span>
swarmMode = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
swarmModeRefreshSeconds = &lt;span style="color:#b44">&amp;#34;60s&amp;#34;&lt;/span>
useBindPortIP = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
exposedByDefault = &lt;span style="color:#a2f;font-weight:bold">false&lt;/span>
&lt;span style="color:#080;font-style:italic"># Enable file configuration backend&lt;/span>
[providers.file]
directory = &lt;span style="color:#b44">&amp;#34;/providers&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic"># Enable ACME (Let&amp;#39;s Encrypt): automatic SSL.&lt;/span>
[certificatesResolvers.zrezaiResolver.acme]
email = &lt;span style="color:#b44">&amp;#34;zadjad@zrezai-dev.de&amp;#34;&lt;/span>
storage = &lt;span style="color:#b44">&amp;#34;acme.json&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic"># CA server to use.&lt;/span>
&lt;span style="color:#080;font-style:italic"># Uncomment the line to use Let&amp;#39;s Encrypt&amp;#39;s staging server,&lt;/span>
&lt;span style="color:#080;font-style:italic"># leave commented to go to prod.&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># caServer = &amp;#34;https://acme-staging-v02.api.letsencrypt.org/directory&amp;#34;&lt;/span>
caServer = &lt;span style="color:#b44">&amp;#34;https://acme-v02.api.letsencrypt.org/directory&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic"># KeyType to use.&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Optional&lt;/span>
&lt;span style="color:#080;font-style:italic"># Default: &amp;#34;RSA4096&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Available values : &amp;#34;EC256&amp;#34;, &amp;#34;EC384&amp;#34;, &amp;#34;RSA2048&amp;#34;, &amp;#34;RSA4096&amp;#34;, &amp;#34;RSA8192&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
keyType = &lt;span style="color:#b44">&amp;#34;RSA4096&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic"># Use a TLS-ALPN-01 ACME challenge.&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Optional (but recommended)&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># [certificatesResolvers.zrezaiResolver.acme.tlsChallenge]&lt;/span>
&lt;span style="color:#080;font-style:italic"># Use a HTTP-01 ACME challenge.&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Optional&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># [certificatesResolvers.zrezaiResolver.acme.httpChallenge]&lt;/span>
&lt;span style="color:#080;font-style:italic"># EntryPoint to use for the HTTP-01 challenges.&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Required&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># entryPoint = &amp;#34;web&amp;#34;&lt;/span>
&lt;span style="color:#080;font-style:italic"># Use a DNS-01 ACME challenge rather than HTTP-01 challenge.&lt;/span>
&lt;span style="color:#080;font-style:italic"># Note: mandatory for wildcard certificate generation.&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
&lt;span style="color:#080;font-style:italic"># Optional&lt;/span>
&lt;span style="color:#080;font-style:italic">#&lt;/span>
[certificatesResolvers.zrezaiResolver.acme.dnsChallenge]
provider = &lt;span style="color:#b44">&amp;#34;cloudflare&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Im groben sagen die Kommentare eigentlich schon alles.&lt;/p>
&lt;p>Da meine DNS Cloudflare ist, habe ich als &lt;code>let's encrypt&lt;/code>-challenge die &lt;code>dnsChallenge&lt;/code> ausgewählt.&lt;/p>
&lt;p>Falls ihr auch die den &lt;code>acme&lt;/code>-test über &lt;code>DNS&lt;/code> machen wollt, benötigt ihr eine &lt;code>tls.env&lt;/code>, welche im aktuellen &lt;code>docker-compose.yaml&lt;/code> angesprochen wird.&lt;/p>
&lt;p>Die &lt;code>tls.env&lt;/code> sieht wie folgt aus:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ini" data-lang="ini">&lt;span style="color:#b44">CF_API_EMAIL&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">zadjad@zrezai-dev.de&lt;/span>
&lt;span style="color:#b44">CF_ZONE_API_TOKEN&lt;/span>&lt;span style="color:#666">=&lt;/span>
&lt;span style="color:#b44">CF_DNS_API_TOKEN&lt;/span>&lt;span style="color:#666">=&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Die &lt;code>Zone&lt;/code> und &lt;code>DNS&lt;/code> API muss im Cloudflare Dashboard mit folgenden Rechten erstellt werden:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Typ&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CF_DNS_API_TOKEN&lt;/td>
&lt;td>API token with DNS:Edit permission (since v3.1.0)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CF_ZONE_API_TOKEN&lt;/td>
&lt;td>API token with Zone:Read permission (since v3.1.0)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Weitere Informationen hier: &lt;a href="https://go-acme.github.io/lego/dns/cloudflare/">https://go-acme.github.io/lego/dns/cloudflare/&lt;/a>&lt;/p>
&lt;p>Wenn man die überprüfung nicht über DNS machen will, können wir auch ganz einfach die &lt;code>HTTP-01 ACME challenge&lt;/code> oder die &lt;code>TLS-ALPN-01 ACME challenge&lt;/code> nutzen.&lt;/p>
&lt;p>Bensonders interessant ist folgenden Teil der Konfiguration:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">
&lt;span style="color:#080;font-style:italic"># Enable Docker configuration backend&lt;/span>
[providers.docker]
endpoint = &lt;span style="color:#b44">&amp;#34;tcp://dockerproxy:2375&amp;#34;&lt;/span>
network = &lt;span style="color:#b44">&amp;#34;traefik-network&amp;#34;&lt;/span>
swarmMode = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
swarmModeRefreshSeconds = &lt;span style="color:#b44">&amp;#34;60s&amp;#34;&lt;/span>
useBindPortIP = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
exposedByDefault = &lt;span style="color:#a2f;font-weight:bold">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Da wir die &lt;code>dockerproxy&lt;/code> nutzen, um unser Docker Socket nicht offen für den &lt;code>traefik&lt;/code>-Container rumliegen zu lassen, müssen wir natürlich &lt;code>traefik&lt;/code> sagen wo unser &lt;code>docker endpoint&lt;/code> ist.&lt;/p>
&lt;p>&lt;code>exposedByDefault&lt;/code> ist auf falsch gesetzt, damit &lt;code>traefik&lt;/code> nicht alle Container &lt;code>exposed&lt;/code>, sondern nur jene die wir über das &lt;code>traefik.enabled&lt;/code>-label veröffentlichen wollen.&lt;/p>
&lt;p>Der andere besonders wichtige Teil ist der &lt;code>provider&lt;/code>. In &lt;code>traefik&lt;/code> kann man außerhalb der Hauptkonfiguration, weitere Konfigurationen hinzufügen. Alle &lt;code>middleware&lt;/code> Konfiguration müssen über &lt;code>provider&lt;/code> geregelt werden.&lt;/p>
&lt;p>Wir sagen in &lt;code>traefik.toml&lt;/code>, dass wir im Ordner &lt;code>providers&lt;/code> Extrakonfiguration haben:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#080;font-style:italic"># Enable file configuration backend&lt;/span>
[providers.file]
directory = &lt;span style="color:#b44">&amp;#34;/providers&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Innerhalb dieses Ordners ist aktuell nur die &lt;code>file-provider.toml&lt;/code>, jedoch können da viele weitere Konfigurationsdateien sein und alles wird normal eingelesen.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[http.middlewares]
[http.middlewares.simpleRatelimiter.rateLimit]
average = &lt;span style="color:#666">5&lt;/span>
period = &lt;span style="color:#b44">&amp;#34;1s&amp;#34;&lt;/span>
burst = &lt;span style="color:#666">50&lt;/span>
[http.middlewares.nextcloudRatelimiter.rateLimit]
average = &lt;span style="color:#666">5&lt;/span>
period = &lt;span style="color:#b44">&amp;#34;1s&amp;#34;&lt;/span>
burst = &lt;span style="color:#666">150&lt;/span>
[http.middlewares.simpleInflightreq.inFlightReq]
amount = &lt;span style="color:#666">50&lt;/span>
[http.middlewares.auth.basicAuth]
usersFile = &lt;span style="color:#b44">&amp;#34;/var/passwordfile&amp;#34;&lt;/span>
removeheader = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
[http.middlewares.blogHeaders.headers]
frameDeny = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
sslRedirect = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
accessControlAllowMethods= [&lt;span style="color:#b44">&amp;#34;GET&amp;#34;&lt;/span>]
accessControlMaxAge = &lt;span style="color:#666">100&lt;/span>
addVaryHeader = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
stsSeconds = &lt;span style="color:#666">31536000&lt;/span>
stsIncludeSubdomains = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
stsPreload = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
contentTypeNosniff = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
browserXssFilter = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
referrerPolicy = &lt;span style="color:#b44">&amp;#34;no-referrer&amp;#34;&lt;/span>
featurePolicy = &lt;span style="color:#b44">&amp;#34;geolocation &amp;#39;none&amp;#39;; camera &amp;#39;none&amp;#39;; microphone &amp;#39;none&amp;#39;&amp;#34;&lt;/span>
contentSecurityPolicy = &lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#b44"> default-src &amp;#39;self&amp;#39; https;
&lt;/span>&lt;span style="color:#b44"> script-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39; cdn.jsdelivr.net ajax.cloudflare.com;
&lt;/span>&lt;span style="color:#b44"> style-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39; cdn.jsdelivr.net cdnjs.cloudflare.com fonts.googleapis.com;
&lt;/span>&lt;span style="color:#b44"> font-src &amp;#39;self&amp;#39; cdnjs.cloudflare.com fonts.googleapis.com fonts.gstatic.com;
&lt;/span>&lt;span style="color:#b44"> img-src &amp;#39;self&amp;#39; i.giphy.com;
&lt;/span>&lt;span style="color:#b44"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
[http.middlewares.blogHeaders.headers.customResponseHeaders]
Expect&lt;span style="">-&lt;/span>CT = &lt;span style="color:#b44">&amp;#34;max-age=604800, enforce;&amp;#34;&lt;/span>
X&lt;span style="">-&lt;/span>Permitted&lt;span style="">-&lt;/span>Cross&lt;span style="">-&lt;/span>Domain&lt;span style="">-&lt;/span>Policies = &lt;span style="color:#b44">&amp;#34;none&amp;#34;&lt;/span>
server = &lt;span style="color:#b44">&amp;#34;Mein Server&amp;#34;&lt;/span>
[http.middlewares.nextcloudHeaders.headers]
sslRedirect = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
accessControlMaxAge = &lt;span style="color:#666">100&lt;/span>
addVaryHeader = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
stsSeconds = &lt;span style="color:#666">31536000&lt;/span>
stsIncludeSubdomains = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
stsPreload = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
contentTypeNosniff = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
browserXssFilter = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
referrerPolicy = &lt;span style="color:#b44">&amp;#34;no-referrer&amp;#34;&lt;/span>
featurePolicy = &lt;span style="color:#b44">&amp;#34;geolocation &amp;#39;none&amp;#39;; camera &amp;#39;none&amp;#39;; microphone &amp;#39;none&amp;#39;&amp;#34;&lt;/span>
contentSecurityPolicy = &lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#b44"> default-src &amp;#39;self&amp;#39; https;
&lt;/span>&lt;span style="color:#b44"> script-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39; cdn.jsdelivr.net ajax.cloudflare.com;
&lt;/span>&lt;span style="color:#b44"> style-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39; cdn.jsdelivr.net cdnjs.cloudflare.com fonts.googleapis.com;
&lt;/span>&lt;span style="color:#b44"> font-src &amp;#39;self&amp;#39; cdnjs.cloudflare.com fonts.googleapis.com fonts.gstatic.com;
&lt;/span>&lt;span style="color:#b44"> frame-ancestors &amp;#39;self&amp;#39;;
&lt;/span>&lt;span style="color:#b44"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
[http.middlewares.nextcloudHeaders.headers.customResponseHeaders]
Expect&lt;span style="">-&lt;/span>CT = &lt;span style="color:#b44">&amp;#34;max-age=604800, enforce;&amp;#34;&lt;/span>
X&lt;span style="">-&lt;/span>Permitted&lt;span style="">-&lt;/span>Cross&lt;span style="">-&lt;/span>Domain&lt;span style="">-&lt;/span>Policies = &lt;span style="color:#b44">&amp;#34;none&amp;#34;&lt;/span>
X&lt;span style="">-&lt;/span>Frame&lt;span style="">-&lt;/span>Options = &lt;span style="color:#b44">&amp;#34;SAMEORIGIN&amp;#34;&lt;/span>
server = &lt;span style="color:#b44">&amp;#34;Mein Server&amp;#34;&lt;/span>
[http.middlewares.simpleHeaders.headers]
frameDeny = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
sslRedirect = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
accessControlMaxAge = &lt;span style="color:#666">100&lt;/span>
addVaryHeader = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
stsSeconds = &lt;span style="color:#666">31536000&lt;/span>
stsIncludeSubdomains = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
stsPreload = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
contentTypeNosniff = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
browserXssFilter = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
referrerPolicy = &lt;span style="color:#b44">&amp;#34;no-referrer&amp;#34;&lt;/span>
featurePolicy = &lt;span style="color:#b44">&amp;#34;geolocation &amp;#39;none&amp;#39;; camera &amp;#39;none&amp;#39;; microphone &amp;#39;none&amp;#39;&amp;#34;&lt;/span>
contentSecurityPolicy = &lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#b44"> default-src &amp;#39;self&amp;#39; https;
&lt;/span>&lt;span style="color:#b44"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
[http.middlewares.simpleHeaders.headers.customResponseHeaders]
Expect&lt;span style="">-&lt;/span>CT = &lt;span style="color:#b44">&amp;#34;max-age=604800, enforce;&amp;#34;&lt;/span>
X&lt;span style="">-&lt;/span>Permitted&lt;span style="">-&lt;/span>Cross&lt;span style="">-&lt;/span>Domain&lt;span style="">-&lt;/span>Policies = &lt;span style="color:#b44">&amp;#34;none&amp;#34;&lt;/span>
server = &lt;span style="color:#b44">&amp;#34;Mein Server&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hier definiere ich einige globale wie wichtige &lt;a href="https://docs.traefik.io/middlewares/headers/">&lt;code>HTTP Header&lt;/code>&lt;/a>, &lt;a href="https://docs.traefik.io/middlewares/ratelimit/">&lt;code>rate limiting&lt;/code>&lt;/a> und &lt;a href="https://docs.traefik.io/middlewares/basicauth/">&lt;code>authentification&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Mit diesen Headern sollte man eine &lt;code>A&lt;/code>-Bewertung bei Überprüfungen der Security Header haben. Je nachdem wie eure Services arbeiten und worauf sie zugreifen, sollte man Dinge wie &lt;code>contentSecruityPolicy&lt;/code> ändern. Die &lt;code>simpleHeaders&lt;/code>-Middleware sollte aber bei den meisten Services passen.&lt;/p>
&lt;p>Ein Rätsel könnte das hier sein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml"> [http.middlewares.auth.basicAuth]
usersFile = &lt;span style="color:#b44">&amp;#34;/var/passwordfile&amp;#34;&lt;/span>
removeheader = &lt;span style="color:#a2f;font-weight:bold">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hier definieren wir die &lt;code>middleware&lt;/code> mit dem Namen &lt;code>auth&lt;/code> und ihr Typ ist &lt;a href="https://docs.traefik.io/middlewares/basicauth/">&lt;code>basicAuth&lt;/code>&lt;/a>. Die User, die dann auf die Domains zugreifen können, werden in &lt;code>usersFile&lt;/code> definiert.&lt;/p>
&lt;p>Die Daten besteht aus Zeilen von &lt;code>user:hash(password)&lt;/code> - also alle Passwörter müssen mit &lt;code>MD5&lt;/code>, &lt;code>SHA1&lt;/code> oder &lt;code>Bcrypt&lt;/code> gehashed sein. Ich nutze &lt;code>Bcrypt&lt;/code>, da es vermutlich die beste hashing-methode von den angebotenen ist.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> htpasswd -nbB USER &lt;span style="color:#b44">&amp;#34;PASSWORD&amp;#34;&lt;/span> | sed &lt;span style="color:#b44">&amp;#39;/^$/d&amp;#39;&lt;/span> &amp;gt;&amp;gt; passwordfile
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Damit wird eine Datein &lt;code>passwordfile&lt;/code> erstellt oder erweitert mit dem &lt;code>USER&lt;/code> und dem gehashtem Password. Mit &lt;code>sed&lt;/code> entfernen wir einfach nur leere Zeilen aus dem Ergebnis von &lt;code>htpasswd&lt;/code>.&lt;/p>
&lt;h2 id="starten-der-services">Starten der Services&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> docker stack deploy -c nexworking/docker-compose.yaml nextcloud-stack
docker stack deploy -c zrezai-dev/docker-compose.yaml blog-stack
docker stack deploy -c traefik/docker-compose.yaml traefik-stack
docker service rm blog-stack_blog_builder
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Damit werden nacheinander alle Services gestartet. Es ist nur wichtig, dass &lt;code>traefik&lt;/code> zuletzt gestartet wird.&lt;/p>
&lt;h3 id="misc-automatisierung">Misc (Automatisierung)&lt;/h3>
&lt;p>Starten und beenden der &lt;code>docker stacks&lt;/code> kann nervig sein, wenn man alles per Hand macht. Daher hier ein kleines Script, was das ganze automatisiert.&lt;/p>
&lt;p>&lt;a href="https://taskfile.dev/#/installation">&lt;code>Taskfile&lt;/code>&lt;/a> ist ein cooles kleines Tool, was dabei helfen kann solche Aufgaben schnell zu automatisieren.&lt;/p>
&lt;p>Hier ist mein &lt;code>Taskfile.yml&lt;/code> - es liegt auf der selben Höhe wie die Ordner.&lt;/p>
&lt;pre>&lt;code>version: '2'
tasks:
default:
desc: Start all services
deps:
- task: nextcloud
vars:
CMD: &amp;quot;deploy -c nexworking/docker-compose.yaml&amp;quot;
- task: zrezai-dev
vars:
CMD: &amp;quot;deploy -c zrezai-dev/docker-compose.yaml&amp;quot;
- task: vault
vars:
CMD: &amp;quot;deploy -c vault/docker-compose.yaml&amp;quot;
cmds:
- task: traefik
vars:
CMD: &amp;quot;deploy -c traefik/docker-compose.yaml&amp;quot;
- task: zrezai-dev-remove-builder
up:
desc: Start all services
cmds:
- task: default
down:
desc: Stop all services
deps:
- task: traefik
vars:
CMD: &amp;quot;rm&amp;quot;
cmds:
- task: nextcloud
vars:
CMD: &amp;quot;rm&amp;quot;
- task: zrezai-dev
vars:
CMD: &amp;quot;rm&amp;quot;
- task: vault
vars:
CMD: &amp;quot;rm&amp;quot;
traefik:
desc: Start traefik
cmds:
- docker stack {{.CMD}} traefik-stack
silent: false
nextcloud:
desc: Start Nextcloud
cmds:
- docker stack {{.CMD}} nextcloud-stack
zrezai-dev:
desc: Start personal blog
cmds:
- docker stack {{.CMD}} blog-stack
zrezai-dev-remove-builder:
desc: Remove unneeded builder services
cmds:
- docker service rm blog-stack_blog_builder
&lt;/code>&lt;/pre>&lt;p>Recht primitiv, aber jetzt kann man einfach mit &lt;code>task&lt;/code> oder &lt;code>task up&lt;/code> alle Stacks in der korrekten Reihenfolge starten &amp;amp; den &lt;code>blog_builder&lt;/code> korrekt löschen. Mit &lt;code>task down&lt;/code> werden alle &lt;code>stacks&lt;/code> wieder beendet &amp;amp; ihre Überreste werden entfernt.&lt;/p>
- https://zrezai-dev.de/projekt/traefik-nextcloud-docker-swarm/ -</description></item><item><title>Docker – Teil 3: Eintauchen in komplexere Bereiche</title><link>https://zrezai-dev.de/container/docker-teil-3/</link><pubDate>Tue, 31 Mar 2020 08:29:42 +0000</pubDate><guid>https://zrezai-dev.de/container/docker-teil-3/</guid><description>Zadjad Rezai. https://zrezai-dev.de/container/docker-teil-3/ -&lt;p>Wie in &lt;a rel="noreferrer noopener" aria-label="Teil-2 (öffnet in neuem Tab)" href="https://zrezai-dev.de/container/docker-rest-apis-teil-2/" target="_blank">Teil-2&lt;/a> versprochen, tauchen wir diesmal etwas tiefer in Docker ein, verbessern und erweitern unsere App.&lt;/p>
&lt;p>Das &lt;a rel="noreferrer noopener" aria-label="Repository (öffnet in neuem Tab)" href="https://github.com/Xcalizorz/docker-example-restapi" target="_blank">Repository&lt;/a> basiert jetzt auf verschiedenen Branches, die jeweils mit einem Blogpost zusammen hängen. Aktuell gibt es die Branch &lt;em>&lt;a rel="noreferrer noopener" aria-label="step-2 (öffnet in neuem Tab)" href="https://github.com/Xcalizorz/docker-example-restapi/tree/part-2" target="_blank">step-2&lt;/a>&lt;/em>, und &lt;em>&lt;a rel="noreferrer noopener" aria-label="step-3 (öffnet in neuem Tab)" href="https://github.com/Xcalizorz/docker-example-restapi/tree/part-3" target="_blank">step-3&lt;/a>&lt;/em> welcher mit Teil 2 bzw. Teil 3 der Docker-Serie zusammenhängen.&lt;/p>
&lt;h2 id="docker-funktionsweise">Docker Funktionsweise&lt;/h2>
&lt;p>In &lt;a rel="noreferrer noopener" aria-label="Teil-1 (öffnet in neuem Tab)" href="https://zrezai-dev.de/container/docker-teil-1-eine-einfuehrung/" target="_blank">Teil-1&lt;/a> bin ich teilweise auf die Ziele von Docker eingegangen, jedoch habe ich außen vor gelassen wie das ganze überhaupt funktioniert. Wie kann es sein, dass man isolierte VM-ähnliche Gebilde hat, während man keinen eigenen Kernel braucht?&lt;/p>
&lt;p>
&lt;mark>Das Problem ist, dass das gar nicht stimmt.&lt;/mark>
&lt;/p>
&lt;p>Docker ist zwar recht isoliert, jedoch nicht auf dem Level einer VM! In den aller meisten Fällen wird das auch unwichtig sein, aber es ist wichtig zu wissen, dass Docker &lt;strong>Linux&lt;/strong>-Namespaces nutzt, um einen isolierten Prozess zu simulieren.&lt;/p>
&lt;p>Grundsätzlich sieht der Docker-Alltag so aus, dass ein Docker-Daemon gestartet wird und dieser u. a. für die Erstellung jener isolierten Prozesse zuständig ist. Auf Windows wird dieser Daemon ironischerweise in einer VM gestartet, da ein Linux-Kernel gebraucht wird, um Linux-Namespaces zu nutzen.&lt;/p>
&lt;div style="text-align:center;">
&lt;figure class="aligncenter size-large">&lt;img src="https://zrezai-dev.de/img/docker-3/docker-intern-1.webp" alt="" class="wp-image-1063" />&lt;figcaption>Abbildung 1: Docker Daemon erstellt Container&lt;/figcaption>&lt;/figure>
&lt;/div>
&lt;p>Zur Isolierung werden unter anderem folgende System-interne Möglichkeiten ausgenutzt:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>PID namespace — Process identifiers and capabilities&lt;/li>
&lt;li>UTS namespace — Host and domain name&lt;/li>
&lt;li>MNT namespace — Filesystem access and structure&lt;/li>
&lt;li>IPC namespace — Process communication over shared memory&lt;/li>
&lt;li>NET namespace — Network access and structure&lt;/li>
&lt;li>USR namespace — User names and identifiers&lt;/li>
&lt;li>chroot syscall — Controls the location of the filesystem root&lt;/li>
&lt;li>cgroups — Resource protection&lt;/li>
&lt;li>CAP drop — Operating system feature restrictions&lt;/li>
&lt;li>Security modules — Mandatory access controls
&lt;br>‒ Docker in Action, Jeff Nickeloff &amp;amp; Stephan Kuenzli, Manning Publications 2019_&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Da Docker-Container keinen eigenen Kernel haben, nutzen sie immer den Host-Kernel, um Befehle an die Hardware zu leiten. Dadurch ist Docker nicht ganz so flexibel wie eine VM. Sollte beispielsweise eines der containerisierten Anwendungen eine ganz bestimmte Kernelversion brauchen, wird diese auch nur bei ganz bestimmten Anwendern funktionieren – da wäre wahrscheinlich die Nutzung einer VM anzuraten.&lt;/p>
&lt;h2 id="erweitern-der-flask-api">Erweitern der Flask API&lt;/h2>
&lt;p>Im ersten Schritt, haben wir eine sehr simple Anwendung erstellt. Damit die REST API einfacher erweitert &amp;amp; dokumentiert werden kann, sollten wir &lt;a rel="noreferrer noopener" aria-label="Swagger (öffnet in neuem Tab)" href="https://swagger.io/" target="_blank">Swagger&lt;/a> zur Dokumentation nutzen und eine bessere Möglichkeit zur Erstellung von REST APIs nutzen.&lt;/p>
&lt;p>Nach einem ersten Aufteilen, befindet sich der Code jetzt in &lt;code>learn_docker_app/&lt;/code>. Um &lt;code>app.py&lt;/code> starten zu können, muss unser &lt;code>PYTHONPATH&lt;/code> angepasst werden:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#a2f">export&lt;/span> &lt;span style="color:#b8860b">PYTHONPATH&lt;/span>&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#34;{PYTHONPATH}:/path/to/docker-example-restapi&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wir nutzen &lt;code>flask_restx&lt;/code>, um unsere &lt;code>REST API&lt;/code> zu dokumentieren &amp;amp; diese in verschiedene Namespaces aufzuteilen.
&lt;code>learn_docker_app/api/__init__.py&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#b44">A collection of all API namespaces provided by the app.
&lt;/span>&lt;span style="color:#b44">If you want to add more namespaces, you need to provide them inside this sub-module
&lt;/span>&lt;span style="color:#b44">and add the namespace to the `Api`. Here is an example:
&lt;/span>&lt;span style="color:#b44">After creating a new file called `new_api.py` with the following simple content:
&lt;/span>&lt;span style="color:#b44">
&lt;/span>&lt;span style="color:#b44"> from flask_restx import Namespace
&lt;/span>&lt;span style="color:#b44"> new_api_namespace = Namespace(&amp;#39;New API&amp;#39;, description=&amp;#39;Any description.&amp;#39;)
&lt;/span>&lt;span style="color:#b44">
&lt;/span>&lt;span style="color:#b44">We have to add the new namespace to our `Api` via inserting the following lines into `apis/__init__.py`:
&lt;/span>&lt;span style="color:#b44">
&lt;/span>&lt;span style="color:#b44"> from .new_api import new_api_namespace
&lt;/span>&lt;span style="color:#b44"> api.add_namespace(new_api_namespace, path=&amp;#39;/new/&amp;#39;)
&lt;/span>&lt;span style="color:#b44">
&lt;/span>&lt;span style="color:#b44">Now, the `New API` can be contacted via `baseurl/new/`
&lt;/span>&lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">flask_restx&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> Api
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">.respond&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> respond_namespace
api &lt;span style="color:#666">=&lt;/span> Api(
version&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;1.0&amp;#39;&lt;/span>,
title&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;Learning Docker API&amp;#39;&lt;/span>,
description&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;A simple API created by Zadjad Rezai&amp;#39;&lt;/span>,
)
api&lt;span style="color:#666">.&lt;/span>add_namespace(respond_namespace, path&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;/respond/&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ein neues Feature soll dazu kommen - &lt;code>learn_docker_app/tests/test_responses.py&lt;/code>. Sobald ein Nutzer über eine &lt;code>GET&lt;/code>-Anfrage &lt;code>/respond/hostname&lt;/code> aufruft, sollen möglichst der Hostname &amp;amp; das Betriebssystem des Clients sowie des Servers ausgegeben werden. Natürlich, wie immer – zuerst die Tests. 💉&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">dataclasses&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> dataclass
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">types&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> SimpleNamespace
&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">pytest&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">learn_docker_app.app&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> create_app
&lt;span style="color:#a2f">@pytest.fixture&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">client&lt;/span>():
app &lt;span style="color:#666">=&lt;/span> create_app()
app&lt;span style="color:#666">.&lt;/span>config[&lt;span style="color:#b44">&amp;#39;TESTING&amp;#39;&lt;/span>] &lt;span style="color:#666">=&lt;/span> True
&lt;span style="color:#a2f;font-weight:bold">with&lt;/span> app&lt;span style="color:#666">.&lt;/span>test_client() &lt;span style="color:#a2f;font-weight:bold">as&lt;/span> client:
&lt;span style="color:#a2f;font-weight:bold">yield&lt;/span> client
&lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">TestResponse&lt;/span>:
&lt;span style="color:#a2f">@staticmethod&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">copy_cat_response&lt;/span>(test_string: &lt;span style="color:#a2f">str&lt;/span>):
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> f&lt;span style="color:#b44">&amp;#34;/respond/{test_string}&amp;#34;&lt;/span>
&lt;span style="color:#a2f">@pytest.mark.parametrize&lt;/span>(&lt;span style="color:#b44">&amp;#34;test_string&amp;#34;&lt;/span>, [
&lt;span style="color:#b44">&amp;#34;hi&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;bye&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;xxx&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;123!&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;-12312&amp;#34;&lt;/span>,
])
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">test_simple_response__simple_message&lt;/span>(self, client, test_string):
response &lt;span style="color:#666">=&lt;/span> client&lt;span style="color:#666">.&lt;/span>get(self&lt;span style="color:#666">.&lt;/span>copy_cat_response(test_string))
&lt;span style="color:#a2f;font-weight:bold">assert&lt;/span> response&lt;span style="color:#666">.&lt;/span>status_code &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#666">200&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">assert&lt;/span> response&lt;span style="color:#666">.&lt;/span>json &lt;span style="color:#666">==&lt;/span> {&lt;span style="color:#b44">&amp;#39;response&amp;#39;&lt;/span>: test_string}
&lt;span style="color:#a2f">@pytest.mark.parametrize&lt;/span>(&lt;span style="color:#b44">&amp;#34;test_string&amp;#34;&lt;/span>, [
&lt;span style="color:#b44">&amp;#34;../&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;&lt;/span>&lt;span style="color:#b62;font-weight:bold">\\&lt;/span>&lt;span style="color:#b44">//..&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;cd ..//&amp;#34;&lt;/span>,
])
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">test_simple_response__wrong_url&lt;/span>(self, client, test_string):
response &lt;span style="color:#666">=&lt;/span> client&lt;span style="color:#666">.&lt;/span>get(self&lt;span style="color:#666">.&lt;/span>copy_cat_response(test_string))
&lt;span style="color:#a2f;font-weight:bold">assert&lt;/span> response&lt;span style="color:#666">.&lt;/span>status_code &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#666">404&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">test_hostname&lt;/span>(self, client, monkeypatch):
monkeypatch&lt;span style="color:#666">.&lt;/span>setattr(&lt;span style="color:#b44">&amp;#39;learn_docker_app.api.respond.platform&amp;#39;&lt;/span>, MockPlatform)
monkeypatch&lt;span style="color:#666">.&lt;/span>setattr(&lt;span style="color:#b44">&amp;#39;learn_docker_app.api.respond.request&amp;#39;&lt;/span>, MockRequest)
response &lt;span style="color:#666">=&lt;/span> client&lt;span style="color:#666">.&lt;/span>get(f&lt;span style="color:#b44">&amp;#34;/respond/hostname&amp;#34;&lt;/span>)
&lt;span style="color:#a2f;font-weight:bold">assert&lt;/span> response&lt;span style="color:#666">.&lt;/span>status_code &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#666">200&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">assert&lt;/span> response&lt;span style="color:#666">.&lt;/span>json &lt;span style="color:#666">==&lt;/span> {
&lt;span style="color:#b44">&amp;#39;host&amp;#39;&lt;/span>: {
&lt;span style="color:#b44">&amp;#39;hostname_or_ip&amp;#39;&lt;/span>: &lt;span style="color:#b44">&amp;#39;TEST-HOSTNAME&amp;#39;&lt;/span>,
&lt;span style="color:#b44">&amp;#39;system&amp;#39;&lt;/span>: &lt;span style="color:#b44">&amp;#39;TEST-SYSTEM&amp;#39;&lt;/span>,
},
&lt;span style="color:#b44">&amp;#39;client&amp;#39;&lt;/span>: {
&lt;span style="color:#b44">&amp;#39;hostname_or_ip&amp;#39;&lt;/span>: &lt;span style="color:#b44">&amp;#39;TEST-HOSTNAME-CLIENT&amp;#39;&lt;/span>,
&lt;span style="color:#b44">&amp;#39;system&amp;#39;&lt;/span>: &lt;span style="color:#b44">&amp;#39;TEST-SYSTEM-CLIENT&amp;#39;&lt;/span>,
},
}
&lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">MockPlatform&lt;/span>:
&lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;Will override the builtin platform module&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a2f">@staticmethod&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">node&lt;/span>():
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#b44">&amp;#39;TEST-HOSTNAME&amp;#39;&lt;/span>
&lt;span style="color:#a2f">@staticmethod&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">system&lt;/span>():
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> &lt;span style="color:#b44">&amp;#39;TEST-SYSTEM&amp;#39;&lt;/span>
&lt;span style="color:#a2f">@dataclass&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">MockRequest&lt;/span>:
&lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;Will override the flask.request object&amp;#34;&amp;#34;&amp;#34;&lt;/span>
user_agent &lt;span style="color:#666">=&lt;/span> SimpleNamespace(platform&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;TEST-SYSTEM-CLIENT&amp;#39;&lt;/span>)
remote_addr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">&amp;#39;TEST-HOSTNAME-CLIENT&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Neu hinzugekommen sind &lt;code>test_hostname()&lt;/code> sowie zwei Mock-Klassen, die innerhalb der Tests bestimmte Funktionen bzw. Klassen anpassen sollen. &lt;code>MockPlatform&lt;/code> ist ein Mock des internen Moduls &lt;code>platform&lt;/code>, welches uns Informationen über den Server liefern kann. &lt;code>MockRequest&lt;/code> soll&lt;code>flask.request&lt;/code> überschreiben, welches uns Daten über den Client liefern kann.&lt;/p>
&lt;p>Jedes &lt;code>API&lt;/code> Namespace wird in einer eigenen &lt;code>.py&lt;/code>-Datei definiert und implementiert - z. B. &lt;code>learn_docker_app/api/respond.py&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">platform&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">flask&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> request
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">flask_restx&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> fields, Namespace, Resource
respond_namespace &lt;span style="color:#666">=&lt;/span> Namespace(
&lt;span style="color:#b44">&amp;#39;respond&amp;#39;&lt;/span>,
description&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;Provides operations that generate a simple response.&amp;#39;&lt;/span>
)
copy_cat_model &lt;span style="color:#666">=&lt;/span> respond_namespace&lt;span style="color:#666">.&lt;/span>model(&lt;span style="color:#b44">&amp;#39;Respond&amp;#39;&lt;/span>, {
&lt;span style="color:#b44">&amp;#39;response&amp;#39;&lt;/span>: fields&lt;span style="color:#666">.&lt;/span>String(description&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;The string provided.&amp;#39;&lt;/span>)
})
&lt;span style="color:#a2f">@respond_namespace.route&lt;/span>(&lt;span style="color:#b44">&amp;#39;/&amp;lt;string&amp;gt;&amp;#39;&lt;/span>)
&lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">Copycat&lt;/span>(Resource):
&lt;span style="color:#a2f">@respond_namespace.marshal_with&lt;/span>(copy_cat_model)
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">get&lt;/span>(self, string: &lt;span style="color:#a2f">str&lt;/span>):
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> {
&lt;span style="color:#b44">&amp;#39;response&amp;#39;&lt;/span>: string,
}
platform_model &lt;span style="color:#666">=&lt;/span> respond_namespace&lt;span style="color:#666">.&lt;/span>model(&lt;span style="color:#b44">&amp;#39;Host&amp;#39;&lt;/span>, {
&lt;span style="color:#b44">&amp;#39;hostname_or_ip&amp;#39;&lt;/span>: fields&lt;span style="color:#666">.&lt;/span>String(
description&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;The computer’s network name (may not be fully qualified!) or its ip address.&amp;#39;&lt;/span> \
&lt;span style="color:#b44">&amp;#39;An empty string is returned if the value cannot be determined.&amp;#39;&lt;/span>
),
&lt;span style="color:#b44">&amp;#39;system&amp;#39;&lt;/span>: fields&lt;span style="color:#666">.&lt;/span>String(
description&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;Returns the system/OS name, such as &amp;#34;Linux&amp;#34;, &amp;#34;Darwin&amp;#34;, &amp;#39;&lt;/span> \
&lt;span style="color:#b44">&amp;#39;&amp;#34;Java&amp;#34;, &amp;#34;Windows&amp;#34;. An empty string is returned if the&amp;#39;&lt;/span> \
&lt;span style="color:#b44">&amp;#39;value cannot be determined.&amp;#39;&lt;/span>
)
})
hostname_model &lt;span style="color:#666">=&lt;/span> respond_namespace&lt;span style="color:#666">.&lt;/span>model(&lt;span style="color:#b44">&amp;#39;Hostname&amp;#39;&lt;/span>, {
&lt;span style="color:#b44">&amp;#39;host&amp;#39;&lt;/span>: fields&lt;span style="color:#666">.&lt;/span>Nested(platform_model, description&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;Data concerning the API server.&amp;#39;&lt;/span>),
&lt;span style="color:#b44">&amp;#39;client&amp;#39;&lt;/span>: fields&lt;span style="color:#666">.&lt;/span>Nested(platform_model, description&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;Data concerning the requesting client.&amp;#39;&lt;/span>),
})
&lt;span style="color:#a2f">@respond_namespace.route&lt;/span>(&lt;span style="color:#b44">&amp;#39;/hostname&amp;#39;&lt;/span>)
&lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">Hostname&lt;/span>(Resource):
&lt;span style="color:#a2f">@respond_namespace.marshal_with&lt;/span>(hostname_model)
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">get&lt;/span>(self):
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> {
&lt;span style="color:#b44">&amp;#39;host&amp;#39;&lt;/span>: {
&lt;span style="color:#b44">&amp;#39;hostname_or_ip&amp;#39;&lt;/span>: platform&lt;span style="color:#666">.&lt;/span>node(),
&lt;span style="color:#b44">&amp;#39;system&amp;#39;&lt;/span>: platform&lt;span style="color:#666">.&lt;/span>system(),
},
&lt;span style="color:#b44">&amp;#39;client&amp;#39;&lt;/span>: {
&lt;span style="color:#b44">&amp;#39;hostname_or_ip&amp;#39;&lt;/span>: request&lt;span style="color:#666">.&lt;/span>remote_addr,
&lt;span style="color:#b44">&amp;#39;system&amp;#39;&lt;/span>: request&lt;span style="color:#666">.&lt;/span>user_agent&lt;span style="color:#666">.&lt;/span>platform,
},
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Die &lt;code>Copycat&lt;/code>-Klasse übernimmt die Aufgabe der alten &lt;code>simple_response()&lt;/code>-Funktion.&lt;/p>
&lt;p>Die &lt;code>Hostname&lt;/code>-Klasse erlaubt es uns Information über den Server und den anfragenden Client weiterzugeben. Hier also einmal den Hostnamen oder die IP-Adresse sowie das erkannte Betriebssystem. Dadurch können wir uns anschauen welchen Hostnamen unser Docker-Container hat.&lt;/p>
&lt;p>Da das UTS namespace (Host and domain name) von Docker genutzt wird, um möglichst tiefgreifende Isolierung zu erzielen, sollte jeder Container einen eigene Hostnamen zugewiesen bekommen.&lt;/p>
&lt;p>&lt;img src="https://zrezai-dev.de/img/docker-3/local_2.webp" alt="">&lt;/p>
&lt;p>&lt;img src="https://zrezai-dev.de/img/docker-3/local_2_hostname.webp" alt="">&lt;/p>
&lt;p>Auf unserem Host-PC funktioniert die API einwandfrei. Unser Flask-Server nutzt wieder Port &lt;code>5000&lt;/code>.&lt;/p>
&lt;p>Die Ausgabe von &lt;code>/respond/hostname&lt;/code> ist:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#008000;font-weight:bold">&amp;#34;host&amp;#34;&lt;/span>: {
&lt;span style="color:#008000;font-weight:bold">&amp;#34;hostname_or_ip&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;REDACTED&amp;#34;&lt;/span>,
&lt;span style="color:#008000;font-weight:bold">&amp;#34;system&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;windows&amp;#34;&lt;/span>
},
&lt;span style="color:#008000;font-weight:bold">&amp;#34;client&amp;#34;&lt;/span>: {
&lt;span style="color:#008000;font-weight:bold">&amp;#34;hostname_or_ip&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;127.0.0.1&amp;#34;&lt;/span>,
&lt;span style="color:#008000;font-weight:bold">&amp;#34;system&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;windows&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker">Docker&lt;/h2>
&lt;p>Wir erweitern unsere &lt;code>.dockerignore&lt;/code>-Datei, um weitere unnötige Dateien auszugrenzen:&lt;/p>
&lt;pre>&lt;code>**/%appdata%
**/venv
**/__pycache__
.idea
.github
.devcontainer
.vscode
.gitignore
LICENSE
*.md
img
&lt;/code>&lt;/pre>&lt;p>Danach passen wir unser &lt;code>Dockerfile&lt;/code> an, damit diese mit der neuen Projekt-Struktur zurechtkommt:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#a2f;font-weight:bold">FROM&lt;/span>&lt;span style="color:#b44"> python:3.7.7-alpine&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#b44"> /home/learn_docker_app&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">ENV&lt;/span> PYTHONPATH &lt;span style="color:#b44">&amp;#34;&lt;/span>&lt;span style="color:#b68;font-weight:bold">${&lt;/span>&lt;span style="color:#b8860b">PYTHONPATH&lt;/span>&lt;span style="color:#b68;font-weight:bold">}&lt;/span>&lt;span style="color:#b44">:/home&amp;#34;&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">COPY&lt;/span> learn_docker_app ./&lt;span style="">
&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">RUN&lt;/span> pip3 install --upgrade pip &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> pip3 --disable-pip-version-check --no-cache-dir install -r requirements.txt &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> pip3 --disable-pip-version-check --no-cache-dir install -r requirements-test.txt &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> rm -rf *.txt &lt;span style="color:#b62;font-weight:bold">\
&lt;/span>&lt;span style="color:#b62;font-weight:bold">&lt;/span> &lt;span style="color:#666">&amp;amp;&amp;amp;&lt;/span> pytest&lt;span style="">
&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">EXPOSE&lt;/span>&lt;span style="color:#b44"> 5000&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">ENTRYPOINT&lt;/span> [&lt;span style="color:#b44">&amp;#34;python3&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;app.py&amp;#34;&lt;/span>]&lt;span style="">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Neu hier ist, dass wir unseren &lt;code>RUN&lt;/code>-Befehl in einen Befehl gefasst haben, um möglichst wenig Image-Layer in unserem Build zu haben. So wird die Buildgröße kleingehalten.&lt;/p>
&lt;p>Außerdem ist der &lt;code>ENV&lt;/code>-Befehl neu. Dieser definiert Umgebungsvariablen – hier setzen wir unseren &lt;code>PYTHONPATH&lt;/code> genau wie vorher auch.&lt;/p>
&lt;p>Docker erstellt aus Optimierungsgründen für jeden Befehl eine eigene Schicht (Layer) – ein isolierter Container, der nur diesen einen Schritt ausführt. Diese einzelnen Container sieht man auch im Buildprozess, siehe unten.&lt;/p>
&lt;p>
&lt;mark>Nun starten wir den Buildprozess&lt;/mark>
&lt;/p>
&lt;p>&lt;code>docker image build --tag xcalizorz/docker-example-restapi:1.1 .&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-terminal" data-lang="terminal">Sending build context to Docker daemon 286.7kB
Step 1/7 : FROM python:3.7.7-alpine
3.7.7-alpine: Pulling from library/python
aad63a933944: Pull complete
f229563217f5: Pull complete
71ded8122394: Pull complete
807d0888ee2e: Pull complete
95206a02ba21: Pull complete
Digest: sha256:4a704ebee45695fa91125301e43eee08a85fc984d05cc75650cc66fad7826c56
Status: Downloaded newer image for python:3.7.7-alpine
---&amp;gt; 7fbc871584eb
Step 2/7 : WORKDIR /home/learn_docker_app
---&amp;gt; Running in ab4310580790
Removing intermediate container ab4310580790
---&amp;gt; 6bef8525d882
Step 3/7 : ENV PYTHONPATH &amp;quot;${PYTHONPATH}:/home&amp;quot;
---&amp;gt; Running in 2141d223dcdd
Removing intermediate container 2141d223dcdd
---&amp;gt; c1b348453453
Step 4/7 : COPY learn_docker_app ./
---&amp;gt; 8ad2bc2439b8
..
...
....
============================= test session starts ==============================
platform linux -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1
rootdir: /home/learn_docker_app
collected 9 items
tests/test_responses.py ......... [100%]
============================== 9 passed in 0.20s ===============================
Removing intermediate container 4cab6203ca5b
---&amp;gt; e681ce2ee7b9
Step 6/7 : EXPOSE 5000
---&amp;gt; Running in 6c16c40836ac
Removing intermediate container 6c16c40836ac
---&amp;gt; 3683acd0cad5
Step 7/7 : ENTRYPOINT [&amp;quot;python3&amp;quot;, &amp;quot;app.py&amp;quot;]
---&amp;gt; Running in c17aed8c3cf9
Removing intermediate container c17aed8c3cf9
---&amp;gt; 1ac04a07a974
Successfully built 1ac04a07a974
Successfully tagged xcalizorz/docker-example-restapi:1.1
&lt;/code>&lt;/pre>&lt;p>Um Platz zu sparen habe ich &lt;code>Step 4&lt;/code> und &lt;code>5&lt;/code> ausgelassen.&lt;/p>
&lt;p>Die Layer erkennt man z. B. hier:&lt;/p>
&lt;pre>&lt;code>Step 6/7 : EXPOSE 5000
---&amp;gt; Running in 6c16c40836ac
Removing intermediate container 6c16c40836ac
&lt;/code>&lt;/pre>&lt;p>&lt;code>6c16c40836ac&lt;/code> ist der Container für den Layer, welcher in &lt;code>Step 6&lt;/code> genutzt wird.&lt;/p>
&lt;p>Da wir nun auch &lt;code>pytest&lt;/code> aufrufen, wird der Buildprozess fehlschlagen, sobald nicht alle Tests fehlerfrei ausgeführt werden konnten. Vielleicht integrieren wir das ganze in Zukunft mit &lt;a href="https://jenkins.io/" target="_blank" rel="noreferrer noopener" aria-label="Jenkins (öffnet in neuem Tab)">Jenkins&lt;/a> o. ä.?&lt;/p>
&lt;p>
&lt;mark>Jetzt können wir unseren Container starten&lt;/mark>
&lt;/p>
&lt;p>&lt;code>docker container run --detach --publish 8080:5000 --name webserver xcalizorz/docker-example-restapi:1.1&lt;/code>&lt;/p>
&lt;p>Das ist equivalent zu:&lt;/p>
&lt;p>&lt;code>docker run -d -p 8080:5000 --name webserver xcalizorz/docker-example-restapi:1.1&lt;/code>&lt;/p>
&lt;p>Auf geht’s zu &lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="http://localhost:8080/" target="_blank">http://localhost:8080/&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://zrezai-dev.de/img/docker-3/in_docker_2.webp" alt="">&lt;/p>
&lt;p>&lt;img src="https://zrezai-dev.de/img/docker-3/in_docker_2_hostname.webp" alt="">&lt;/p>
&lt;p>Die Ausgabe von &lt;code>/respond/hostname&lt;/code> ist jetzt:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#008000;font-weight:bold">&amp;#34;host&amp;#34;&lt;/span>: {
&lt;span style="color:#008000;font-weight:bold">&amp;#34;hostname_or_ip&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;82c1788f0d51&amp;#34;&lt;/span>,
&lt;span style="color:#008000;font-weight:bold">&amp;#34;system&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;Linux&amp;#34;&lt;/span>
},
&lt;span style="color:#008000;font-weight:bold">&amp;#34;client&amp;#34;&lt;/span>: {
&lt;span style="color:#008000;font-weight:bold">&amp;#34;hostname_or_ip&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;172.17.0.1&amp;#34;&lt;/span>,
&lt;span style="color:#008000;font-weight:bold">&amp;#34;system&amp;#34;&lt;/span>: &lt;span style="color:#b44">&amp;#34;windows&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Damit haben wir den Beweis – unser Docker-Container ist in seiner eigenen, isolierten Umgebung.&lt;/p>
&lt;p>&lt;code>172.17.0.1&lt;/code> ist das sogenannte &lt;a rel="noreferrer noopener" aria-label="default-bridge-network (öffnet in neuem Tab)" href="https://docs.docker.com/network/network-tutorial-standalone/#use-the-default-bridge-network" target="_blank">default-bridge-network&lt;/a> von Docker.&lt;/p>
- https://zrezai-dev.de/container/docker-teil-3/ -</description></item><item><title>Docker – Teil 2: Eigene REST API</title><link>https://zrezai-dev.de/container/docker-rest-apis-teil-2/</link><pubDate>Wed, 25 Mar 2020 20:16:43 +0000</pubDate><guid>https://zrezai-dev.de/container/docker-rest-apis-teil-2/</guid><description>Zadjad Rezai. https://zrezai-dev.de/container/docker-rest-apis-teil-2/ -&lt;p>Um die Simplizität von Docker zu erläutern, möchte ich eine kleine Python-Anwendung erstellen, welche wir über Docker veröffentlichen und nutzen können. Der Code sollte ab Python 3.6 funktionieren und ist auf &lt;a href="https://github.com/Xcalizorz/docker-example-restapi/tree/part-2" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">meinem Github-Repo&lt;/a> einsehbar. Für eine Einführung in&lt;/p>
&lt;p>&lt;code>Flask&lt;/code>, schaut euch &lt;a href="https://flask.palletsprojects.com/en/1.1.x/tutorial/#tutorial" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">das offizielle Tutorial&lt;/a> an.&lt;/p>
&lt;p>Im ersten Schritt soll nur eine simple &lt;code>API&lt;/code> geschrieben werden, welche beim Aufrufen von &lt;code>/response/&amp;lt;string&amp;gt;&lt;/code> den angegeben String als Antwort zurücksenden.&lt;/p>
&lt;p>Bevor wir beginnen sollten folgende Pakete installiert werden: &lt;code>pytest, flask&lt;/code>&lt;/p>
&lt;p>Gerne auch über &lt;code>python -m pip install -r app/requirements.txt&lt;/code>&lt;/p>
&lt;h2 id="tests">Tests&lt;/h2>
&lt;p>Nach &lt;a href="https://zrezai-dev.de/methodik/warum-tdd/">TDD&lt;/a>-manier, beginnen wir erstmal mit einem Test – ich nutze gerne &lt;code>pytest&lt;/code> für meine Tests, weil das ein enorm gutes Framework ist, um schnell, einfach und professionel Tests zu schreiben.&lt;/p>
&lt;p>Zuerst erstellen wir die &lt;code>./setup.cfg&lt;/code> für &lt;code>pytest&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cfg" data-lang="cfg">&lt;span style="color:#a2f;font-weight:bold">[tool:pytest]&lt;/span>
&lt;span style="color:#b44">log_auto_indent&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">True&lt;/span>
&lt;span style="color:#b44">testpaths&lt;/span> &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">app/tests&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dann können wir mit dem Schreiben erster Tests (&lt;code>./app/tests/test_responses.py&lt;/code>) beginnen:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">pytest&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">app.app&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> app
&lt;span style="color:#a2f">@pytest.fixture&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">client&lt;/span>():
app&lt;span style="color:#666">.&lt;/span>config[&lt;span style="color:#b44">&amp;#39;TESTING&amp;#39;&lt;/span>] &lt;span style="color:#666">=&lt;/span> True
&lt;span style="color:#a2f;font-weight:bold">with&lt;/span> app&lt;span style="color:#666">.&lt;/span>test_client() &lt;span style="color:#a2f;font-weight:bold">as&lt;/span> client:
&lt;span style="color:#a2f;font-weight:bold">yield&lt;/span> client
&lt;span style="color:#a2f;font-weight:bold">class&lt;/span> &lt;span style="color:#00f">TestResponse&lt;/span>:
&lt;span style="color:#a2f">@pytest.mark.parametrize&lt;/span>(&lt;span style="color:#b44">&amp;#34;test_string&amp;#34;&lt;/span>, [
&lt;span style="color:#b44">&amp;#34;hi&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;bye&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;xxx&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;123!&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;-12312&amp;#34;&lt;/span>,
])
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">test_simple_response__simple_message&lt;/span>(self, client, test_string):
response &lt;span style="color:#666">=&lt;/span> client&lt;span style="color:#666">.&lt;/span>get(f&lt;span style="color:#b44">&amp;#34;/respond/{test_string}&amp;#34;&lt;/span>)
&lt;span style="color:#a2f;font-weight:bold">assert&lt;/span> response&lt;span style="color:#666">.&lt;/span>status_code &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#666">200&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">assert&lt;/span> response&lt;span style="color:#666">.&lt;/span>json &lt;span style="color:#666">==&lt;/span> {&lt;span style="color:#b44">&amp;#39;response&amp;#39;&lt;/span>: test_string}
&lt;span style="color:#a2f">@pytest.mark.parametrize&lt;/span>(&lt;span style="color:#b44">&amp;#34;test_string&amp;#34;&lt;/span>, [
&lt;span style="color:#b44">&amp;#34;../&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;&lt;/span>&lt;span style="color:#b62;font-weight:bold">\\&lt;/span>&lt;span style="color:#b44">//..&amp;#34;&lt;/span>, &lt;span style="color:#b44">&amp;#34;cd ..//&amp;#34;&lt;/span>,
])
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">test_simple_response__wrong_url&lt;/span>(self, client, test_string):
response &lt;span style="color:#666">=&lt;/span> client&lt;span style="color:#666">.&lt;/span>get(f&lt;span style="color:#b44">&amp;#34;/respond/{test_string}&amp;#34;&lt;/span>)
&lt;span style="color:#a2f;font-weight:bold">assert&lt;/span> response&lt;span style="color:#666">.&lt;/span>status_code &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#666">404&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In Zeile 6 bis 11 erstellen wir einen &lt;code>Flask&lt;/code>-Testclient und nutzen diesen, um unsere &lt;code>API&lt;/code> zu testen.&lt;/p>
&lt;p>Über die &lt;code>TestResponse&lt;/code> Klasse überprüfen wir zwei simple Szenarien&lt;/p>
&lt;ol>
&lt;li>Nutzer übergibt eine akzeptierte Nachricht ein &lt;code>test_simple_response__simple_message&lt;/code>&lt;/li>
&lt;li>Nutzer gibt etwas nicht akzeptables ein &lt;code>test_simple_response__wrong_url&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>In Szenario 1 wird als Rückmeldung eine &lt;code>JSON&lt;/code>-Antwort erwartet, welche so aussieht: &lt;code>{'response': test_string}&lt;/code>&lt;br>
Im zweiten Szenario wird ein &lt;code>404-Fehler&lt;/code> erwartet.&lt;/p>
&lt;h2 id="rest-api">REST API&lt;/h2>
&lt;p>Da wir die Tests nun haben, können wir uns an die &lt;code>REST API&lt;/code> setzen und unsere Tests mit &lt;code>./app/app.py&lt;/code> zum laufen bringen.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">flask&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> Flask, jsonify
app &lt;span style="color:#666">=&lt;/span> Flask(__name__)
&lt;span style="color:#a2f">@app.route&lt;/span>(&lt;span style="color:#b44">&amp;#34;/respond/&amp;lt;string&amp;gt;&amp;#34;&lt;/span>, methods&lt;span style="color:#666">=&lt;/span>[&lt;span style="color:#b44">&amp;#39;GET&amp;#39;&lt;/span>])
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">simple_response&lt;/span>(string: &lt;span style="color:#a2f">str&lt;/span>):
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> jsonify(
response&lt;span style="color:#666">=&lt;/span>string
)
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> __name__ &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#b44">&amp;#39;__main__&amp;#39;&lt;/span>:
app&lt;span style="color:#666">.&lt;/span>run(host&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#b44">&amp;#39;0.0.0.0&amp;#39;&lt;/span>, port&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">5000&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In &lt;code>Flask&lt;/code> kann man natürlich auch klassenbasiert arbeiten, aber so wie es jetzt ist, ist es erstmal in Ordnung.&lt;br>
Unsere &lt;code>API&lt;/code> erlaubt eine &lt;code>GET&lt;/code> Anfrage an &lt;code>/respond/&amp;lt;string&amp;gt;&lt;/code> und kreiert eine &lt;code>JSON&lt;/code>-Antwort mit dem Inhalt &lt;code>{response: string}&lt;/code>&lt;/p>
&lt;p>Nun können wir unsere App via Python starten: &lt;code>python app/app.py&lt;/code>&lt;/p>
&lt;div style="text-align:center;">
&lt;figure class="aligncenter size-large">&lt;img src="https://zrezai-dev.de/img/docker-2/local_1.webp" alt=""/>&lt;figcaption>Abbildung 1: GET Anfrage auf localhost&lt;/figcaption>&lt;/figure>
&lt;/div>
&lt;p>Die Tests können wir mit dem Befehl &lt;code>pytest&lt;/code> ausführen.&lt;/p>
&lt;pre>&lt;code class="language-terminal" data-lang="terminal">(venv) C:\..\docker-example-restapi&amp;gt; pytest
===================================== test session starts =====================================
platform win32 -- Python 3.7.4, pytest-5.4.1, py-1.8.1, pluggy-0.13.1
rootdir: C:\..\docker-example-restapi, inifile: setup.cfg, testpaths: app/tests
collected 8 items
app\tests\test_responses.py ........ [100%]
===================================== 8 passed in 0.40s =======================================
&lt;/code>&lt;/pre>&lt;p>Da alle Tests problemlos durchgelaufen sind, wissen wir, dass unsere &lt;code>API&lt;/code> funktioniert wie wir wollen.&lt;/p>
&lt;h2 id="docker">Docker&lt;/h2>
&lt;p>Docker nutzt u. a. &lt;code>Dockerfiles&lt;/code>, um die einzelnen Schritte der Instanziierung zu beschreiben.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#a2f;font-weight:bold">FROM&lt;/span>&lt;span style="color:#b44"> python:3.7.7-alpine&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">COPY&lt;/span> app /app&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#b44"> /app&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">RUN&lt;/span> pip3 install --upgrade pip&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">RUN&lt;/span> pip3 install -r requirements.txt&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">EXPOSE&lt;/span>&lt;span style="color:#b44"> 5000&lt;/span>&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">ENTRYPOINT&lt;/span> [&lt;span style="color:#b44">&amp;#34;python3&amp;#34;&lt;/span>]&lt;span style="">
&lt;/span>&lt;span style="">&lt;/span>&lt;span style="color:#a2f;font-weight:bold">CMD&lt;/span> [&lt;span style="color:#b44">&amp;#34;app.py&amp;#34;&lt;/span>]&amp;lt;/pre&amp;gt;&lt;span style="">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gehen wir hier einmal Zeilenweise durch&lt;/p>
&lt;ol>
&lt;li>&lt;code>FROM&lt;/code> beschreibt wo wir beginnen wollen – wir wollen bei einer Dockerumgebung beginnen, die durch &lt;a href="https://hub.docker.com/_/python">python:3.7.7-alpine&lt;/a> definiert ist
&lt;ul>
&lt;li>Dadurch wird Python 3.7.7 installiert, ggf. heruntergeladen, falls nicht lokal vorhanden&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>COPY&lt;/code> funktioniert wie der Linux-&lt;code>cp&lt;/code>-Befehl. &lt;code>cp source destination&lt;/code> – Damit wird der lokale Ordner &lt;code>app&lt;/code> in den Docker-Ordner &lt;code>app/&lt;/code> kopiert&lt;/li>
&lt;li>&lt;code>WORKDIR&lt;/code> definiert den aktuellen Arbeitsordner&lt;/li>
&lt;li>&lt;code>RUN&lt;/code> beschreibt was genau innerhalb der Docker-Instanz (bei mir eine Linux-Instanz) aufgerufen werden soll
&lt;ul>
&lt;li>Im ersten Schritt upgrade ich pip&lt;/li>
&lt;li>Im zweiten Schritt werden alle nötigen Abhängigkeiten installiert (genau wie bei einer lokalen Installation)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>EXPOSE&lt;/code> sagt aus unter welchen Ports unsere Docker-Instanz von außen erreichbar sein soll – hier 5000&lt;/li>
&lt;li>&lt;code>ENTRYPOINT&lt;/code> erlaubt höhere Kontrolle der Eingangsargumente beim Starten des Containers – alle Argumente von &lt;code>docker run&lt;/code> sind damit Argumente des &lt;code>ENTRYPOINT&lt;/code>’s&lt;/li>
&lt;li>&lt;code>CMD&lt;/code> irgendeine Anweisung an unseren Container
&lt;ul>
&lt;li>Da unser &lt;code>ENTRYPOINT&lt;/code> &lt;code>python3&lt;/code> ist, wäre der gesamte Befehl &lt;code>python3 app.py&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;mark>.dockerignore&lt;/mark>
&lt;/p>
&lt;p>Eine &lt;code>.dockerignore&lt;/code>-Datei funktioniert wie eine &lt;code>.gitignore&lt;/code>-Datei – alles darin angegebene wird nicht Teil des Dockerbuilds. Mehr Details in der &lt;a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file">Docker Dokumentation&lt;/a>.&lt;/p>
&lt;pre>&lt;code class="language-gitignore" data-lang="gitignore">**/%appdata%
**/venv&amp;lt;/pre&amp;gt;
&lt;/code>&lt;/pre>&lt;p>
&lt;mark>docker build&lt;/mark>
&lt;/p>
&lt;p>Jetzt können wir endlich anfangen zu bauen. Insgesamt wurden nur zwei Dateien mit zusammen 10 Zeilen Code hinzugefügt.&lt;br>
Nun geht es endlich in eine Shell-Umgebung (tty, powershell, etc.)&lt;/p>
&lt;pre>&lt;code class="language-terminal" data-lang="terminal">[node1] (local) root ~
$ ls
docker-example-restapi
[node1] (local) root ~
$ cd docker-example-restapi/
[node1] (local) root ~/docker-example-restapi
$ ls
Dockerfile LICENSE README.md app setup.cfg
[node1] (local) root ~/docker-example-restapi
$ docker image build --tag xcalizorz/docker-example-restapi:1.0 .
Sending build context to Docker daemon 123.4kB
Step 1/8 : FROM python:3.7.7-alpine
3.7.7-alpine: Pulling from library/python
aad63a933944: Pull complete
f229563217f5: Pull complete
71ded8122394: Pull complete
807d0888ee2e: Pull complete
95206a02ba21: Pull completeDigest: sha256:4a704ebee45695fa91125301e43eee08a85fc984d05cc75650cc66fad7826c56
Status: Downloaded newer image for python:3.7.7-alpine
---&amp;gt; 7fbc871584eb
Step 2/8 : COPY app /app
---&amp;gt; 7988d031143d
Step 3/8 : WORKDIR /app
---&amp;gt; Running in d71f7ff48d85
Removing intermediate container d71f7ff48d85
---&amp;gt; 3f69a63db409
Step 4/8 : RUN pip3 install --upgrade pip
---&amp;gt; Running in 305280adbbc9
Requirement already up-to-date: pip in /usr/local/lib/python3.7/site-packages (20.0.2)
Removing intermediate container 305280adbbc9
---&amp;gt; 6c9da2129f02
Step 5/8 : RUN pip3 install -r requirements.txt
---&amp;gt; Running in fa85c4c1c56b
Collecting flask
Downloading Flask-1.1.1-py2.py3-none-any.whl (94 kB)
Collecting pytest
Downloading pytest-5.4.1-py3-none-any.whl (246 kB)
Collecting Jinja2&amp;gt;=2.10.1
Downloading Jinja2-2.11.1-py2.py3-none-any.whl (126 kB)
Collecting itsdangerous&amp;gt;=0.24
Downloading itsdangerous-1.1.0-py2.py3-none-any.whl (16 kB)
Collecting Werkzeug&amp;gt;=0.15
Downloading Werkzeug-1.0.0-py2.py3-none-any.whl (298 kB)
Collecting click&amp;gt;=5.1
Downloading click-7.1.1-py2.py3-none-any.whl (82 kB)
Collecting importlib-metadata&amp;gt;=0.12; python_version &amp;amp;lt; &amp;quot;3.8&amp;quot;
Downloading importlib_metadata-1.5.1-py2.py3-none-any.whl (30 kB)
Collecting attrs&amp;gt;=17.4.0
Downloading attrs-19.3.0-py2.py3-none-any.whl (39 kB)
Collecting packaging
Downloading packaging-20.3-py2.py3-none-any.whl (37 kB)
Collecting more-itertools&amp;gt;=4.0.0
Downloading more_itertools-8.2.0-py3-none-any.whl (43 kB)
Collecting pluggy&amp;amp;lt;1.0,&amp;gt;=0.12
Downloading pluggy-0.13.1-py2.py3-none-any.whl (18 kB)
Collecting wcwidth
Downloading wcwidth-0.1.9-py2.py3-none-any.whl (19 kB)
Collecting py&amp;gt;=1.5.0
Downloading py-1.8.1-py2.py3-none-any.whl (83 kB)
Collecting MarkupSafe&amp;gt;=0.23
Downloading MarkupSafe-1.1.1.tar.gz (19 kB)
Collecting zipp&amp;gt;=0.5
Downloading zipp-3.1.0-py3-none-any.whl (4.9 kB)
Collecting six
Downloading six-1.14.0-py2.py3-none-any.whl (10 kB)
Collecting pyparsing&amp;gt;=2.0.2
Downloading pyparsing-2.4.6-py2.py3-none-any.whl (67 kB)
Building wheels for collected packages: MarkupSafe
Building wheel for MarkupSafe (setup.py): started
Building wheel for MarkupSafe (setup.py): finished with status 'done'
Created wheel for MarkupSafe: filename=MarkupSafe-1.1.1-py3-none-any.whl size=12629 sha256=235a27d61d695fffaab5a991ce459a0ba4a9eae57113c9b6bf5a9a5c89e45088
Stored in directory: /root/.cache/pip/wheels/b9/d9/ae/63bf9056b0a22b13ade9f6b9e08187c1bb71c47ef21a8c9924
Successfully built MarkupSafe
Installing collected packages: MarkupSafe, Jinja2, itsdangerous, Werkzeug, click, flask, zipp, importlib-metadata, attrs, six, pyparsing, packaging, more-itertools, pluggy, wcwidth, py, pytest
Successfully installed Jinja2-2.11.1 MarkupSafe-1.1.1 Werkzeug-1.0.0 attrs-19.3.0 click-7.1.1 flask-1.1.1 importlib-metadata-1.5.1 itsdangerous-1.1.0 more-itertools-8.2.0 packaging-20.3 pluggy-0.13.1 py-1.8.1 pyparsing-2.4.6 pytest-5.4.1 six-1.14.0 wcwidth-0.1.9 zipp-3.1.0
Removing intermediate container fa85c4c1c56b
---&amp;gt; d640ba0e6471
Step 6/8 : EXPOSE 5000
---&amp;gt; Running in abf93887096d
Removing intermediate container abf93887096d
---&amp;gt; 9792a24ce22b
Step 7/8 : ENTRYPOINT [&amp;quot;python3&amp;quot;]
---&amp;gt; Running in 5559040fecef
Removing intermediate container 5559040fecef
---&amp;gt; fb509e1def0d
Step 8/8 : CMD [&amp;quot;app.py&amp;quot;]
---&amp;gt; Running in 52f84a3385e2
Removing intermediate container 52f84a3385e2
---&amp;gt; c4256a07215a
Successfully built c4256a07215a
Successfully tagged xcalizorz/docker-example-restapi:1.0
&lt;/code>&lt;/pre>&lt;p>Wir navigieren einfach in den Arbeitsordner &lt;code>docker-example-restapi&lt;/code> und geben folgenden Befehl ein:&lt;/p>
&lt;p>&lt;code>docker image build --tag xcalizorz/docker-example-restapi:1.0 .&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker image build&lt;/code> erstellt das Docker Image&lt;/li>
&lt;li>&lt;code>--tag&lt;/code> erlaubt es uns einen benutzerdefinierten Namen zu vergeben&lt;/li>
&lt;li>&lt;code>.&lt;/code> ist der relative Pfad zum Ordner mit dem &lt;code>Dockerfile&lt;/code>&lt;/li>
&lt;li>&lt;code>xcalizorz&lt;/code> ist meine Dockerhub ID&lt;/li>
&lt;/ul>
&lt;p>Nun haben wir ein Docker Image, jedoch läuft es noch nicht. Wenn man eine VM installiert und vorbereitet hat, ist diese z. B. in Virtualbox sichtbar – sie wurde schon &lt;em>gebaut&lt;/em>, jedoch ist die VM noch aus.&lt;/p>
&lt;p>Mit folgendem Befehl starten wir unser Image:&lt;/p>
&lt;pre>&lt;code class="language-terminal" data-lang="terminal">[node1] (local) root ~/docker-example-restapi
$ docker container run --detach --publish 8080:5000 --name responder xcalizorz/docker-example-restapi:1.0
7679e475e1517d2850c14fd6ffc7cc5947bc43ae506dbb9cc6cc22e2fa9a74e7&amp;lt;/pre&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>docker container run&lt;/code> startet einen neuen Container mittels unseres Images&lt;/li>
&lt;li>&lt;code>--detach&lt;/code> startet den Container im Hintergrund&lt;/li>
&lt;li>&lt;code>--publish 8080:5000&lt;/code> veröffentlicht unseren Container auf Port 5000 des Docker Containers und 8080 des Host-Computers
&lt;ul>
&lt;li>&lt;code>--publish host_port:container_port&lt;/code> – wenn nun Anfragen auf Port 8080 meines Host-Computers treffen, werden diese direkt an Port 5000 des Containers weitergegeben&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>--name&lt;/code> vergibt einen Namen an unseren Container&lt;/li>
&lt;li>Zuletzt noch den Namen unseres Images&lt;/li>
&lt;/ul>
&lt;p>Schon ist unser Container gestartet. Mit &lt;code>docker container ls&lt;/code>, können wir die aktuell laufenden Container sehen&lt;/p>
&lt;pre>&lt;code class="language-terminal" data-lang="terminal">[node1] (local) root ~/docker-example-restapi
$ docker container ls
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
7679e475e151 xcalizorz/docker-example-restapi:1.0 &amp;quot;python3 app.py&amp;quot; 18 minutes ago Up 18 minutes 0.0.0.0:8080-&amp;gt;5000/tcp responder&amp;lt;/pre&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Damit haben wir einen Container, der über &lt;code>Port 8080&lt;/code> unseres Host-Computers erreichbar ist.&lt;/p>
&lt;div style="text-align:center;">
&lt;figure class="aligncenter size-large">&lt;img src="https://zrezai-dev.de/img/docker-2/in_docker_1.webp" alt=""/>&lt;figcaption>Abbildung 2: GET Anfrage an Docker&lt;/figcaption>&lt;/figure>
&lt;/div>
&lt;div style="text-align:center;">
&lt;figure class="aligncenter size-large">&lt;img src="https://zrezai-dev.de/img/docker-2/Sequenzdiagramm.webp" alt=""/>&lt;figcaption>Abbildung 3: Vereinfachtes Sequenzdiagramm unserer Anwendung&lt;/figcaption>&lt;/figure>
&lt;/div>
&lt;p>Später wird die Anwendung erweitert und wir tauchen tiefer in die Materie der Container-Welt ein.&lt;/p>
- https://zrezai-dev.de/container/docker-rest-apis-teil-2/ -</description></item><item><title>Docker – Teil 1: Eine Einführung.</title><link>https://zrezai-dev.de/container/docker-teil-1-eine-einfuehrung/</link><pubDate>Wed, 25 Mar 2020 20:16:33 +0000</pubDate><guid>https://zrezai-dev.de/container/docker-teil-1-eine-einfuehrung/</guid><description>Zadjad Rezai. https://zrezai-dev.de/container/docker-teil-1-eine-einfuehrung/ -&lt;div>
&lt;figcaption>Foto von &lt;a href="https://www.flickr.com/photos/134416355@N07/">Kyohei Ito&lt;/a>&lt;/figcaption>&lt;/figure>
&lt;/div>
&lt;p>In diesem ersten Post, möchte ich Docker grob vorstellen und im nächsten Teil eine Beispielanwendung veröffentlichen.&lt;/p>
&lt;p>Docker ist eine interessante technische Entwicklung, welche uns zeigt, dass wir uns aktuell in jeder Ebene in die selbe Richtung bewegen – immer weiter in die Abstraktion von Komplexität.&lt;/p>
&lt;p>
&lt;mark>Bevor ich auf Docker selbst eingehe, möchte ich einige Gedanken zur Grundlegenden Überlegung los werden.&lt;/mark>
&lt;/p>
&lt;p>Seit Jahren sieht die Bewegung auf dem technischen Markt gleich aus: Abstraktion.&lt;/p>
&lt;p>Damit möchte man Komplexität nehmen, System und Anwendungen weniger Abhängig voneinander machen und damit Verbesserung, Bereitstellung und zukünftige Bewegung der Software vereinfachen.&lt;/p>
&lt;p>Beim Schreiben der ersten Anwendungen, stellen viele fest, dass es enorm aufwendig ist wichtige Teile der Anwendung zu verbessern, anzupassen oder gar auszutauschen. Dadurch kommt es zu einem fundamentalen Konflikt ****und man muss sich entscheiden, ob man&lt;/p>
&lt;ol>
&lt;li>das Projekt aufgibt (traurig 😔)&lt;/li>
&lt;li>die Änderung macht (aufwenig)&lt;/li>
&lt;li>das Projekt so ändert, dass zukünftige Änderungen leichter sind (sehr aufwenig)&lt;/li>
&lt;/ol>
&lt;p>Im Grunde möchte gute Software &lt;a href="https://martinfowler.com/ieeeSoftware/coupling.pdf" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">Kopplungen niedrig halten&lt;/a> und &lt;a href="https://stackoverflow.com/questions/10830135/what-is-high-cohesion-and-how-to-use-it-make-it" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">Kohäsion stärken&lt;/a>.&lt;/p>
&lt;p>Dieses Konzept, bekannt in der Softwareentwicklung, lässt sich natürlich u. a. auf das Konzept von virtuellen Maschinen (VMs) übertragen. So merkt man, dass die Welt auch hier wieder ganz ähnlich aussieht.&lt;/p>
&lt;p>Früher hat man eine VM gehabt, welche für eine bestimmte Software verantwortlich war – beispielsweise hat man eine VM, welche eine Datenbank betreibt. Braucht mehr mehr Datenbanken, muss man eine neue VM erstellen – und das dauert vergleichsweise lange.&lt;/p>
&lt;p>Eine VM jedoch hat viele Abhängigkeiten, die für die Datenbank eigentlich nicht von Bedeutung sind – jedes mal muss beispielsweise mit der VM ein Betriebssystem installiert werden. Damit ist die Kopplung ziemlich hoch und die logische Aufgabe der VM ist nicht &lt;strong>nur&lt;/strong> die Datenbank, weshalb sie keine einzige definierte Verantwortung hat (niedrige Kohäsion).&lt;/p>
&lt;p>Eine VM ist damit sehr ineffizient und sollte heutzutage nur genutzt werden, wenn man Container nicht nutzen kann.&lt;/p>
&lt;div style="text-align:center;">
&lt;figure class="aligncenter size-large">&lt;img src="https://zrezai-dev.de/img/docker-1/vm_1-1.webp" alt="" srcset="https://zrezai-dev.de/img/docker-1/vm_1-1.webp 406w, https://zrezai-dev.de/img/docker-1/vm_1-1.webp 300w" sizes="(max-width: 406px) 100vw, 406px" />&lt;figcaption>Abbildung 1: Nutzung von VMs&lt;/figcaption>&lt;/figure>
&lt;/div>
&lt;p>In Abbildung 1 erkennt man einen ungefähren Aufbau einer VM-Architektur. Die Hardware wurde durch die Virtualisierung weg abstrahiert, weshalb eine VM seinen Kernel (Guest OS), die jeweiligen Abhängigkeiten und natürlich den Code oder die Software benötigt, die man darauf laufen lassen möchte.&lt;/p>
&lt;p>Wenn man das Prinzip von &lt;a href="https://martinfowler.com/ieeeSoftware/repetition.pdf">DRY&lt;/a> auf dieses Bild anwendet, erkennt man, dass der &lt;strong>Kernel&lt;/strong> eine Sache ist, die sich wiederholt, aber eigentlich nicht wirklich etwas mit der Dienstleistung zu tun hat, die man liefern möchte. Man sollte diese also separieren können, um nicht unnötig Resourcen zu verschwenden.&lt;/p>
&lt;p>
&lt;mark>Container kommen zur Rettung&lt;/mark>
&lt;/p>
&lt;p>Nun sollte es eindeutig geworden sein, dass eine VM-Architektur ein fundamentales Problem aufweist. Docker bietet dafür die Möglichkeit diesen Teil zu abstrahieren.&lt;/p>
&lt;div style="text-align:center;">
&lt;figure class="aligncenter size-large">&lt;img src="https://zrezai-dev.de/img/docker-1/docker_1-1.webp" alt="" class="wp-image-1001" srcset="https://zrezai-dev.de/img/docker-1/docker_1-1.webp 406w, https://zrezai-dev.de/img/docker-1/docker_1-1.webp 300w" sizes="(max-width: 406px) 100vw, 406px" />&lt;figcaption>Abbildung 2: VMs werden zu Containern&lt;/figcaption>&lt;/figure>
&lt;/div>
&lt;p>Durch die Abstraktion des Kernels/des Betriebssystems, tritt man in eine Welt ein, die schnellere Bereitstellungen, einfache Weitergabe und höhere Skalierbarkeit erlaubt.&lt;/p>
&lt;p>Bevor wir zu tief in die Details gehen, können wir es &lt;a href="https://zrezai-dev.de/container/docker-rest-apis-teil-2" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">einfach ausprobieren&lt;/a>.&lt;/p>
- https://zrezai-dev.de/container/docker-teil-1-eine-einfuehrung/ -</description></item><item><title>Warum Test-Driven Development</title><link>https://zrezai-dev.de/methodik/warum-tdd/</link><pubDate>Tue, 17 Dec 2019 10:48:26 +0000</pubDate><guid>https://zrezai-dev.de/methodik/warum-tdd/</guid><description>Zadjad Rezai. https://zrezai-dev.de/methodik/warum-tdd/ -&lt;p>Im Leben kommt man immer irgendwann an einen Punkt an, an dem man sich denkt: Wie kann ich mich verbessern?&lt;/p>
&lt;p>Unser Leben kann teilweise mit einer Zusammensetzung vieler Microservices verglichen werden, auf die ich voraussichtlich in einem anderen Post eingehen werde. In (sehr) kurz; ein Microservice ist wie der Name schon sagt ein &lt;em>kleiner&lt;/em> (Definitionssache) Service, der unabhängig vom Rest funktioniert. Ein kleines Beispiel; ein Baum funktioniert auch, wenn kein Mensch damit interagiert, obwohl wir alle Teil unseres komplexen Ökosystems sind. Der Mensch nutzt den &lt;em>Service&lt;/em>, den ein Baum bietet indirekt. Jeder Baum &lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="https://de.wikipedia.org/wiki/Photosynthese" target="_blank">interagiert mit unserer Atmosphäre&lt;/a>, indem CO&lt;sub>2&lt;/sub> aufgenommen und O&lt;sub>2&lt;/sub> ausgegeben wird. Wir Menschen und die Pflanzenwelt nutzen unter anderem die Atmosphäre als Interface, um miteinander zu kommunizieren.&lt;/p>
&lt;p>Natürlich ist die Welt bei weitem nicht so simple, aber das sollte nur als kleiner Anreiz zum Nachdenken dienen – das komplexe Zusammenspiel aus Objekten in unserer Umgebung ist um einiges vielschichtiger.&lt;/p>
&lt;p>Es geht doch hier um &lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test-Driven Development&lt;/a>, warum reden wir über Bäume?&lt;/p>
&lt;p>Eine simple Antwort wäre: Dinge, die von einem fehlerhaften Objekt geplant werden, können selbst auch nur fehlerhaft sein. Ein Mensch, der niemals perfekt ist, kann keine perfekte Sache produzieren. Jedoch kann ein Mensch sicher gehen, dass Software, die man ausliefert, den Anforderungen entspricht. Den Anforderungen zu entsprechen, ist mein persönlich höhstes Software-Gebot – niemals darf mehr oder weniger gemacht werden, als verlangt.&lt;/p>
&lt;p>Stellen wir uns mal kurz vor; Wir sollen ein Programm für eine Bank schreiben. Diese Bank möchte ihre Daten aus einer alten Datenbankstruktur migrieren und wir sollen diese Migration möglich machen. Was könnte passieren, wenn wir nicht gut genug testen?&lt;/p>
&lt;p>&lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="https://increment.com/testing/what-broke-the-bank/" target="_blank">increment.com&lt;/a> hat in ihrer 10. Ausgabe einen interessanten Artikel über genau dieses Problem geschrieben. Eine Bank stand genau vor dieser Aufgabe und hat &lt;strong>2500 Personen Jahre&lt;/strong> investiert, um dann auf die Nase zu fallen. Die Daten waren nach der Migration korrupt und Kunden haben nach ihrem Einkauf fehlerhafte Einträge bemerkt, beim Online-Login ist man nach dem erfolgreichen Login in den Account fremder Personen gekommen und vieles mehr – definitiv lesenswert.&lt;/p>
&lt;p>Von Experten wird angenommen, dass dieses Problem entstanden ist, weil man nicht genug getestet hat. Sicher war es auch nicht wirklich passend alle Datensätze auf einmal migrieren zu wollen. Viele IT-Giganten migrieren immer nur schrittweise – diese IT-Giganten haben aber auch oft mehr Expertise in diesen Bereichen oder treffen auf mehr Verständnis bei der Zeitplanung als IT-Teams aus dem Finanzsektor. Dieses Beispiel wird wohl noch lange Zeit als Anekdote genutzt, um schrittweise große Transformationen zu begründen.&lt;/p>
&lt;p>Sobald man einen Software-Kraken in die Welt gesetzt hat, muss man ihn auch bändigen. Viele verschiedene Module, Microservices und vielleicht sogar verschiedene Programmiersprachen innerhalb eines solchen Projekts, machen die Aufgabe natürlich nicht leichter &amp;amp; &lt;strong>&lt;em>„schreib doch Tests“&lt;/em>&lt;/strong> ist nicht und kann nicht die Antwort auf alle Probleme sein. Wenn ein riesiges Programm schon geschrieben ist, wird es außerdem unglaublich schwer im nachhinein hinreichend Tests zu schreiben.&lt;/p>
&lt;p>&lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="https://zrezai-dev.de/methodik/qualitatives-pair-programming/" target="_blank">Pair Programming&lt;/a> in Kombination mit zur Aufgabe passenden Management-Methoden wie z. B. &lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="https://en.wikipedia.org/wiki/Agile_software_development" target="_blank">agilen &lt;/a>Herangehensweisen, ständige Förderung und Weiterbildung des Kollegiums &amp;amp; vieles mehr, sind wichtige Bestandteile einer funktionierenden und prosperierenden IT-Umgebung.&lt;/p>
&lt;p>
&lt;mark>Da TDD ein Baustein zu guter Software ist, sollten wir darüber sprechen.&lt;/mark>
&lt;/p>
&lt;p>Glücklicherweise ist es oft so, dass der &lt;em>Name&lt;/em> schon preisgibt worum es genau geht: &lt;em>Test gesteuerte Programmierung&lt;/em>. Die Programmierung einer Software wird durch Tests gesteuert. Man definiert zuerst die Tests, die an den Anforderungen anlehnend geschrieben werden und implementiert dann die Funktion, die getestet werden soll.&lt;/p>
&lt;p>Persönlich nutze ich die Methodik des &lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="https://martinfowler.com/articles/workflowsOfRefactoring/" target="_blank">Red-Green-Refactor&lt;/a> – die Idee ist, dass eine Person für jede Verantwortung einen Hut aufsetzt. Wenn sie die Tests schreibt, hat sie den Testing-Hut auf. Sobald die Person beginnt die Anforderung entsprechend der geschriebenen Tests zu implementieren hat sie den Programming-Hut auf und beim Refactoring nutzt sie den Refactoring-Hut. Martin Fowler nimmt in seiner Beschreibung zwei Hüte als Beispiel, ich habe drei genommen, um auf eine wichtige Idee in der Softwareentwicklung aufmerksam zu machen: das &lt;em>&lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank">single responsibility principle&lt;/a>&lt;/em> (sinngemäß &lt;em>das Prinzip der eindeutigen Verantwortlichkeiten&lt;/em>).&lt;/p>
&lt;p>Red-Green-Refactor, versucht die Verantwortlichkeiten zu separieren: zuerst schreibt man Tests in Übereinstimmung mit den Anforderungen, dann implementiert man die Anforderungen in Übereinstimmung mit den Tests und zuletzt verbessert man den Code.&lt;/p>
&lt;p>Viele stehen oft vor zwei Problemen:&lt;/p>
&lt;ol>
&lt;li>Was soll genau getestet werden?&lt;/li>
&lt;li>Management behauptet Tests wären eine Verschwendung an Resourcen&lt;/li>
&lt;/ol>
&lt;p>
&lt;mark>Was soll genau getestet werden?&lt;/mark>
&lt;/p>
&lt;p>Das war und ist für mich ein großes Problem. Was genau soll ich testen, wie granular sollten die Tests sein? &lt;a rel="noreferrer noopener" aria-label="David Heinemeier Hansson (öffnet in neuem Tab)" href="https://dhh.dk/2014/tdd-is-dead-long-live-testing.html" target="_blank">David Heinemeier Hansson&lt;/a> (Erfinder von Ruby, auch bekannt als DHH) findet es ebenfalls schwer Tests für etwas zu schreiben, was eigentlich noch gar nicht existiert. Es gibt eine interessante Diskussion in der &lt;a href="https://podcasts.google.com/?feed=aHR0cHM6Ly90aG91Z2h0d29ya3MubGlic3luLmNvbS9yc3M%3D&amp;episode=dGFnOnNvdW5kY2xvdWQsMjAxMDp0cmFja3MvMTUwMzM4Mjc3&amp;hl=en" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">ThoughtWorks Podcast Series&lt;/a> und einen guten &lt;a href="https://martinfowler.com/articles/is-tdd-dead/" target="_blank" rel="noreferrer noopener" aria-label="Blog-Post von Martin Fowler (öffnet in neuem Tab)">Blog-Post von Martin Fowler&lt;/a> darüber. Schaut euch das gerne an und bildet euch eine eigene Meinung zu dem Thema.&lt;/p>
&lt;p>Weil es mir auch immer sehr schwer fiel Tests für Dinge zu schreiben, die ich noch gar nicht kenne, waren meine ersten Test so allgemein geschrieben, dass ich prinzipiell das gesamte Programm hätte implementieren müssen, um diesen Test auf Grün zu bekommen. Wenn man so an das Problem herangeht, bringt TDD eigentlich auch keinen wirklich Vorteil.&lt;/p>
&lt;p>Grundsätzlich muss man planerisch vorgehen, je nach Wichtigkeit und Größe des Projekts mit UML vordefinieren und im Team über die Implementierung diskutieren und dann erst umsetzen. Wenn man vorher genug Zeit für die Planung hatte, wird man leichter Tests schreiben können. Die Interfaces der Module &amp;amp; Services sind schon besprochen und müssen nur noch ihren Weg in den Code finden.&lt;/p>
&lt;p>Kent Beck, der Author von &lt;em>&lt;a rel="noreferrer noopener" aria-label="Test-Driven Development by Example (öffnet in neuem Tab)" href="https://www.google.com/books/edition/Test_driven_Development/CUlsAQAAQBAJ?hl=en&amp;gbpv=1&amp;pg=PP1&amp;printsec=frontcover" target="_blank">Test-Driven Development by Example&lt;/a>&lt;/em> beschreibt, dass man nicht einzelne Methoden testen soll, sondern Funktionsweisen. Einzelne Methoden oder Funktionen tragen oft einen schwer pflegbaren Beitrag zur Erfüllung der Anforderung bei. Aber die Anforderung selbst kann (und sollte) getestet werden und dessen Tests sind wartbar, da die Anforderung geschrieben sowie klar definiert ist.&lt;/p>
&lt;p>Ian Cooper beschreibt in seinem wirklich empfehlenswerten Vortrag die Pitfalls des TDD und wie man ihnen ausweichen kann. TLDR; TDD macht Software robust und spart sehr viel Zeit im After-Release, wenn man es richtig umsetzt.&lt;/p>
&lt;figure>
&lt;div>
&lt;iframe title="🚀 DevTernity 2017: Ian Cooper - TDD, Where Did It All Go Wrong" width="100%" height="300" src="https://www.youtube.com/embed/EZ05e7EMOLM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/div>
&lt;/div>&lt;/figure>
&lt;p>
&lt;mark>Management behauptet Tests wären eine Verschwendung an Resourcen&lt;/mark>
&lt;/p>
&lt;p>Ein Trugschluss, den man in allen Bereichen des &lt;em>&lt;a rel="noreferrer noopener" aria-label="Extreme Programming (öffnet in neuem Tab)" href="https://en.wikipedia.org/wiki/Extreme_programming" target="_blank">Extreme Programming&lt;/a>&lt;/em> sieht. Personen, die intuitiv darüber entscheiden müssten, ob &lt;a rel="noreferrer noopener" aria-label="Pair-Programming (öffnet in neuem Tab)" href="https://zrezai-dev.de/methodik/qualitatives-pair-programming/" target="_blank">Pair-Programming&lt;/a> genutzt werden sollte, werden sich oft dagegen entscheiden. Warum sollten zwei Personen an einer Aufgabe arbeiten? Warum soll neben dem eigentlichen Code, der die Anforderung erfüllt, auch noch weiterer Code geschrieben werden – die Anforderung ist doch schon erfüllt? Es sind doch 2 Personen Jahre eingeplant, nicht 4 (oder ähnliches). Aber wie schon in meinem &lt;a href="https://zrezai-dev.de/methodik/qualitatives-pair-programming/">Post über Pair Programming&lt;/a> beschrieben, ist das ein Trugschluss.&lt;/p>
&lt;p>Wenn Tests korrekt und ausführlich geschrieben sind, erhöht das automatisch die Wartbarkeit und Qualität des Produkts. Bei fehlerhaften Änderungen, wird der Fehler um einiges früher erkannt und in Zusammenarbeit mit Programmen wie &lt;a rel="noreferrer noopener" aria-label="Jenkins (öffnet in neuem Tab)" href="https://jenkins.io/" target="_blank">Jenkins&lt;/a> schon direkt beim Push auf die Repository gesichtet. Es braucht keine langen Pull-Request-Reviews mehr, um zu erkennen, dass die neue Funktion oder Änderung eine vorher erfüllte Anforderung kaputt gemacht hat. Man sieht sofort, dass etwas nicht stimmt, ohne dass ein Mensch Zeit für ein Code-Review aufwenden musste.&lt;/p>
&lt;p>Durch hohe Code-Qualität sollten viel weniger Bugs im Produktionscode landen – damit gibt es weniger Probleme, weniger Tickets und mehr Zeit sich auf das wesentliche zu konzentrieren.&lt;/p>
&lt;blockquote>
&lt;p>Ein Kunde, der sich nicht meldet, ist ein zufriedener Kunde.&lt;br>&lt;br>
‒ Mein Software Engineering Professor&lt;/p>
&lt;/blockquote>
&lt;p>Wenn Kunden immer und immer wieder Probleme und Bugs melden müssen, frisst das natürlich auch die Zeit der Kunden. Sie müssen dann auf ein Update warten und verlieren dadurch potenziell Geld. Irgendwann werden diese Kunden sich dann für einen anderen Anbieter entscheiden, einen Anbieter, der vielleicht hohen Wert auf exzellente &lt;em>(was auch immer das sein soll)&lt;/em> Softwarequalität legt, ein Ort an dem TDD gelebt und geliebt wird vielleicht.&lt;/p>
&lt;p>Vielleicht könnt ihr diesen Ort in euren Unternehmen schaffen?&lt;/p>
- https://zrezai-dev.de/methodik/warum-tdd/ -</description></item><item><title>Pair Programming als Qualitätssicherungsmaßnahme</title><link>https://zrezai-dev.de/methodik/qualitatives-pair-programming/</link><pubDate>Wed, 06 Nov 2019 18:10:09 +0000</pubDate><guid>https://zrezai-dev.de/methodik/qualitatives-pair-programming/</guid><description>Zadjad Rezai. https://zrezai-dev.de/methodik/qualitatives-pair-programming/ -&lt;p>
&lt;mark>
Wer so wie die Person auf dem Bild arbeitet, sollte sich diesen Beitrag dringend durchlesen.
&lt;/mark>&lt;/p>
&lt;p>&lt;a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Pair_programming" target="_blank">&lt;em>Pair Programming&lt;/em>&lt;/a> &lt;em>wird in vielen Ebenen der Enterprise-Software-Entwicklung genutzt, gelebt, geliebt und manchmal auch gehasst.&lt;/em>&lt;/p>
&lt;p>Ein schönes Werkzeuge der agilen Software-Entwicklung bildet das Pair Programming, mit seinem intelligenten Ansatz das „Vier-Augen-Prinzip“ auf eine geistig anstrengende Aufgabe anzuwenden.&lt;/p>
&lt;p>Meiner Erfahrung nach wird man in traditionellen, deutschen Unternehmen nicht besonders häufig auf Projekte, in denen Pair Programming gelebt wird, treffen. Ich bin der Auffassung das kommt vom Drang vieler Unternehmen hier in Deutschland die Dinge bei dem zu belassen, was aktuell funktioniert. Gleichzeitig Streuben sich viele verschiedene Funktionsträger gegen die Ausübung des Pair Programmings, weil es kontraintuitiv scheint – man behauptet nämlich, dass die Effizienz steigt, obwohl nun zwei Personen an einer Aufgabe arbeiten. Durch diese und ähnliche falsche Annahmen fallen wir leider in vielen Bereichen zurück – siehe Industrie 4.0, Digitalisierung auf politischer Ebene und natürlich auch in vielen Bereichen der Automobilbranche.&lt;/p>
&lt;p>Eine interessante wissenschaftliche Arbeit liefert folgendes Ergebnis: &lt;a href="https://pdfs.semanticscholar.org/3918/81acebcf21072364316b812617c06140f67f.pdf" target="_blank" rel="noreferrer noopener" aria-label="Pair Programming steigert die Effizienz und Qualität (öffnet in neuem Tab)">Pair Programming steigert die Effizienz und Qualität&lt;/a>. Es sei jedoch erwähnt, dass es kaum empirische Daten zu diesem Problem gibt, weshalb die These auch ungenau sein kann. Viele Unternehmensberater, u. a. &lt;a rel="noreferrer noopener" aria-label="ThoughtWorks (öffnet in neuem Tab)" href="https://www.thoughtworks.com/insights/blog/effective-navigation-in-pair-programming" target="_blank">ThoughtWorks&lt;/a>, sind für das Pair Programming und konnten dessen Wirken in vielen verschiedenen Projekten und Unternehmen miterleben.&lt;/p>
&lt;p>Dieser Blog-Post soll auf gar keinen Fall ein Affront gegen die deutsche Industrie sein – sie hat unglaublich viel geleistet und „Made in Germany“ erst zu einem Ausdruck von Qualität und Sicherheit gemacht – jedoch muss sie sich den neuen Gegebenheiten stellen und Dinge auch anders angehen.&lt;/p>
&lt;p>Viele traditionelle deutsche Unternehmen haben eigene Bereiche, die sich mit neuen Technologien befassen. Als Beispiel erster Schritte sehe ich die &lt;a href="https://www.draeger.com/en_corp/About-Draeger/Innovation/Innovation-Stories" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">Garage des Drägerwerks in Lübeck&lt;/a>.&lt;/p>
&lt;p>Zurück zum Thema: Pair Programming ist eine schon recht „alte“ Herangehensweise an Probleme. Diese Herangehensweise unterstützt agile Teams dabei wahres Continuous Delivery zu erbringen, indem man Dinge wie festen Code Ownership, unklare Veränderungen und lange, oft technisch unattraktive Pull Requests verhindet.&lt;/p>
&lt;blockquote>
&lt;p>Pair programmers: Keep each other on task. Brainstorm refinements to the system. Clarify ideas. Take initiative when their partner is stuck, thus lowering frustration. Hold each other accountable to the team’s practices.&lt;br>&lt;br>
‒ &lt;strong>Kent Beck&lt;/strong>, Extreme Programming Explained: Embrace Change&lt;/p>
&lt;/blockquote>
&lt;h3 id="0-pair-programming">Pair Programming&lt;/h3>
&lt;p>Es ist oft enorm schwierig sein Team davon zu überzeugen, dass Pair Programming angewendet werden sollte – warum? Die Projekt Manager wollen schnelle Ergebnisse sehen und die gibt es doch scheinbar nur, wenn sich die Programmierenden an ihren Platz setzen, mit niemandem plaudern und ausschließlich ihrer Aufgabe nachgehen. Wir möchten produktive Programmierende haben, die ohne große Diskussionen und Ablenkung arbeiten können – Effektivität ist unglaublich wichtig!&lt;/p>
&lt;p>Die Programmierenden sollen konstant an ihrer Aufgabe arbeiten, vordefiniert durch eine Story mit Story Points. Sobald die Aufgabe erledigt ist, soll diese vorgestellt, ggf. überarbeitet und dann abgegeben werden. Die Abgabe erfolgt über einen Pull-Request, dessen Code andere kluge Köpfe kommentieren und Verbesserungen anfordern, bis sie nicht nur mit der Funktionsweise, sondern auch mit dem Code zufrieden sind.&lt;/p>
&lt;p>Das ist was man sich eigentlich wünscht. Die Realität sieht oft anders aus. Im Normalfall wird die Story erledigt und ein Pull-Request wird gestellt – bis hier hin in einem gut funktionierenden Team alles gleich. Dann passiert jedoch oft folgendes: Der Code ist unsauber, Design Patterns wurden nicht korrekt umgesetzt oder missachtet, es ist nicht wirklich nach SOLID gearbeitet worden oder andere weniger gravierende Probleme treten auf. Aber eine Verbesserung davon zu erhalten dauert enorm lange und zieht die Abgabe der Story nach hinten, macht den Sprint kaputt, stört die Product Owner und vieles mehr. Die Entscheidung vieler Reviewer – weil es grundsätzlich bloß menschlich ist – ist dem statt zu geben, da es momentan funktioniert. Man verspricht sich eine neue Story, ein neues ToDo oder ähnliches zu schreiben, damit diese Sache später behoben wird. Da sie aber unwichtig scheint, weil das Programm funktioniert, wird das natürlich weit nach hinten geschoben – falls das überhaupt eine Erwähnung im Board findet. Leider missachtet man in dem Moment, dass diese eine Sache spätere Änderungen enorm verzögern kann. &lt;strong>Der erste Schritt in Richtung technische Schulden.&lt;/strong>&lt;/p>
&lt;p>Dafür ist das Pair Programming da. Wenn zwei kluge Köpfe gemeinsam an einem Problem sitzen und das Pair Programming korrekt ausführen, werden solche Probleme im Normalfall vermieden. Man hat nur zwei Personen, die sich ggf. regelmäßig in den Aufgaben abwechseln. Person A befindet sich im Modus des Schreibers und Person B im Modus des &lt;em>Strategen&lt;/em>. Beide verfolgen das selbe Ziel, arbeiten aber an zwei Fronten. So können sie sich gegenseitig unterstützen, voneinander lernen und kennen beide die Änderungen und Verbesserung im Code.&lt;/p>
&lt;p>Der &lt;em>Schreiber&lt;/em> konzentriert sich auf das aktuelle Problem und lokale Verbesserungen, während sich der &lt;em>Stratege&lt;/em> auf Probleme konzentriert, die durch die Änderungen hervorgerufen werden können. Während beide gemeinsam versuchen auf korrektes Design und intelligente Umsetzung zu achten.&lt;/p>
&lt;p>Somit gibt es keine strikten Code-Ownership-Barrieren mehr, welche viele positive Änderungen verlangsamt.&lt;/p>
&lt;p>Gleichzeitig muss man als Pairer erklären und manchmal sogar verteidigen warum man eine Sache auf eine bestimmte Art umsetzt – wird man vom Partner mit einem besseren Argument belehrt, hat man (a) dazugelernt und (b) besseren Code. In Kombination mit dem Vorteil des Kollektiven-Code-Ownerships erzeugt das echtes Continuous Integration.&lt;/p>
&lt;p>Bedeutet; der Code wird schon während des Schreibens überprüft, ausdiskutiert, verbessert und durchgesprochen. So muss kein Reviewer mehr einen Pull-Request mit schlechtem Gewissen akzeptieren.&lt;/p>
- https://zrezai-dev.de/methodik/qualitatives-pair-programming/ -</description></item><item><title>Der Walrus-Operator (Python 3.8)</title><link>https://zrezai-dev.de/python/walrus-operator/</link><pubDate>Tue, 29 Oct 2019 20:56:27 +0000</pubDate><guid>https://zrezai-dev.de/python/walrus-operator/</guid><description>Zadjad Rezai. https://zrezai-dev.de/python/walrus-operator/ -&lt;p>Endlich ist er da. Der Walrus-Operator, eingeführt mit &lt;a href="https://www.python.org/dev/peps/pep-0572/" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">PEP 572 — Assignment Expressions&lt;/a>.&lt;/p>
&lt;p>Der Walrus-Operator ist mein persönliches Highlight, da ich ihn immer gebraucht habe – nur vorher wusste ich nicht wie sehr ich ihn gebraucht habe.&lt;/p>
&lt;p>Er bringt eine riesen Erleichterung, macht unseren Code kompakter, lesbarer und natürlicher schöner (das Auge liest mit) 😬&lt;/p>
&lt;p>PEP 572 beschreibt die &lt;a href="https://www.python.org/dev/peps/pep-0572/#id9" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">Syntax des Walrus-Operators&lt;/a> meiner Meinung nach perfekt:&lt;/p>
&lt;blockquote class="wp-block-quote">
&lt;p>
In most contexts where arbitrary Python expressions can be used, a&amp;nbsp;&lt;strong>named expression&lt;/strong>&amp;nbsp;can appear. This is of the form&amp;nbsp;NAME := expr&amp;nbsp;where&amp;nbsp;expr&amp;nbsp;is any valid Python expression other than an unparenthesized tuple, and&amp;nbsp;NAME&amp;nbsp;is an identifier.
&lt;/p>
&lt;p>&lt;br>
The value of such a named expression is the same as the incorporated expression, with the additional side-effect that the target is assigned that value:
&lt;/p>
&lt;p>&lt;cite>&lt;a href="https://www.python.org/dev/peps/pep-0572/#id9" target="_blank" rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)">&lt;br>‒ PEP 572 # Syntax and semantics&lt;/a>&lt;/cite>&lt;/p>
&lt;/blockquote>
&lt;h3 id="anwendungsbeispiele">Anwendungsbeispiele&lt;/h3>
&lt;p>Das Beispiel direkt aus dem PEP:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># Handle a matched regex&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (match :&lt;span style="color:#666">=&lt;/span> pattern&lt;span style="color:#666">.&lt;/span>search(data)) &lt;span style="color:#a2f;font-weight:bold">is&lt;/span> &lt;span style="color:#a2f;font-weight:bold">not&lt;/span> None:
&lt;span style="color:#080;font-style:italic"># Do something with match&lt;/span>
&lt;span style="color:#080;font-style:italic"># A loop that can&amp;#39;t be trivially rewritten using 2-arg iter()&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">while&lt;/span> chunk :&lt;span style="color:#666">=&lt;/span> &lt;span style="color:#a2f">file&lt;/span>&lt;span style="color:#666">.&lt;/span>read(&lt;span style="color:#666">8192&lt;/span>):
process(chunk)
&lt;span style="color:#080;font-style:italic"># Reuse a value that&amp;#39;s expensive to compute&lt;/span>
[y :&lt;span style="color:#666">=&lt;/span> f(x), y&lt;span style="color:#666">**&lt;/span>&lt;span style="color:#666">2&lt;/span>, y&lt;span style="color:#666">**&lt;/span>&lt;span style="color:#666">3&lt;/span>]
&lt;span style="color:#080;font-style:italic"># Share a subexpression between a comprehension filter clause and its output&lt;/span>
filtered_data &lt;span style="color:#666">=&lt;/span> [y &lt;span style="color:#a2f;font-weight:bold">for&lt;/span> x &lt;span style="color:#a2f;font-weight:bold">in&lt;/span> data &lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (y :&lt;span style="color:#666">=&lt;/span> f(x)) &lt;span style="color:#a2f;font-weight:bold">is&lt;/span> &lt;span style="color:#a2f;font-weight:bold">not&lt;/span> None]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ein schönes Beispiel von &lt;a rel="noreferrer noopener" aria-label=" (öffnet in neuem Tab)" href="https://twitter.com/VictorStinner/status/1014988580282912770" target="_blank">Victor Stinner&lt;/a> (leicht angepasst):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#666">&amp;gt;&lt;/span>&lt;span style="color:#080;font-style:italic"># Without Walrus-Operator&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">while&lt;/span> True:
line &lt;span style="color:#666">=&lt;/span> fp&lt;span style="color:#666">.&lt;/span>readline()
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> &lt;span style="color:#a2f;font-weight:bold">not&lt;/span> line:
&lt;span style="color:#a2f;font-weight:bold">break&lt;/span>
match &lt;span style="color:#666">=&lt;/span> pattern&lt;span style="color:#666">.&lt;/span>search(line)
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> match:
do_something_with_match(match)
&lt;span style="color:#a2f;font-weight:bold">else&lt;/span>:
match &lt;span style="color:#666">=&lt;/span> other_pattern&lt;span style="color:#666">.&lt;/span>search(line)
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> match:
do_something_with_match(match)
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># With Walrus-Operator&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">while&lt;/span> (line :&lt;span style="color:#666">=&lt;/span> fp&lt;span style="color:#666">.&lt;/span>readline()):
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (match :&lt;span style="color:#666">=&lt;/span> pattern&lt;span style="color:#666">.&lt;/span>search(line)):
do_something_with_match(match)
&lt;span style="color:#a2f;font-weight:bold">elif&lt;/span> (match :&lt;span style="color:#666">=&lt;/span> other_pattern&lt;span style="color:#666">.&lt;/span>search(line)):
do_something_with_match(match)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aufwendige Berechnungen in &lt;a href="https://www.python.org/dev/peps/pep-0202/" target="_blank" rel="noreferrer noopener" aria-label="List Comprehensions (öffnet in neuem Tab)">List Comprehensions &lt;/a>nicht wiederholen:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># Without Walrus-Operator&lt;/span>
filtered_data &lt;span style="color:#666">=&lt;/span> [
complex_func(x) &lt;span style="color:#a2f;font-weight:bold">for&lt;/span> x &lt;span style="color:#a2f;font-weight:bold">in&lt;/span> data
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> complex_func(x) &lt;span style="color:#a2f;font-weight:bold">is&lt;/span> &lt;span style="color:#a2f;font-weight:bold">not&lt;/span> None
]
&lt;span style="color:#080;font-style:italic"># With Walrus-Operator&lt;/span>
filtered_data &lt;span style="color:#666">=&lt;/span> [
y &lt;span style="color:#a2f;font-weight:bold">for&lt;/span> x &lt;span style="color:#a2f;font-weight:bold">in&lt;/span> data
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (y :&lt;span style="color:#666">=&lt;/span> complex_func(x)) &lt;span style="color:#a2f;font-weight:bold">is&lt;/span> &lt;span style="color:#a2f;font-weight:bold">not&lt;/span> None
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Daten einer API erhalten:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># Without Walrus-Operator&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">requests&lt;/span>
book_information &lt;span style="color:#666">=&lt;/span> requests&lt;span style="color:#666">.&lt;/span>get(
&lt;span style="color:#b44">&amp;#34;https://openlibrary.org/api/books?bibkeys=ISBN:0201558025,LCCN:93005405&amp;amp;format=json&amp;#34;&lt;/span>
)
&lt;span style="color:#a2f;font-weight:bold">for&lt;/span> book_id &lt;span style="color:#a2f;font-weight:bold">in&lt;/span> book_information&lt;span style="color:#666">.&lt;/span>json():
thumbnail_url &lt;span style="color:#666">=&lt;/span> book_id[&lt;span style="color:#b44">&amp;#39;thumbnail_url&amp;#39;&lt;/span>]
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> thumbnail_url:
&lt;span style="color:#a2f;font-weight:bold">print&lt;/span>(f&lt;span style="color:#b44">&amp;#39;Here is the thumbnail: {thumbnail_url}&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># With Walrus-Operator&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">requests&lt;/span>
book_information &lt;span style="color:#666">=&lt;/span> requests&lt;span style="color:#666">.&lt;/span>get(
&lt;span style="color:#b44">&amp;#34;https://openlibrary.org/api/books?bibkeys=ISBN:0201558025,LCCN:93005405&amp;amp;format=json&amp;#34;&lt;/span>
)
&lt;span style="color:#a2f;font-weight:bold">for&lt;/span> book_id &lt;span style="color:#a2f;font-weight:bold">in&lt;/span> book_information&lt;span style="color:#666">.&lt;/span>json():
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (thumbnail_url :&lt;span style="color:#666">=&lt;/span> book_id[&lt;span style="color:#b44">&amp;#39;thumbnail_url&amp;#39;&lt;/span>]):
&lt;span style="color:#a2f;font-weight:bold">print&lt;/span>(f&lt;span style="color:#b44">&amp;#39;Here is the thumbnail: {thumbnail_url}&amp;#39;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>- https://zrezai-dev.de/python/walrus-operator/ -</description></item><item><title>PEP 8 – Design für Vererbung</title><link>https://zrezai-dev.de/python/pep/pep-8-design/</link><pubDate>Fri, 15 Feb 2019 11:19:07 +0000</pubDate><guid>https://zrezai-dev.de/python/pep/pep-8-design/</guid><description>Zadjad Rezai. https://zrezai-dev.de/python/pep/pep-8-design/ -&lt;p>Das ist die Fortführung des ersten Posts über &lt;a href="https://zrezai-dev.de/python/pep-8/">PEP 8&lt;/a>.&lt;/p>
&lt;p>Diesmal geht es ausschließlich um einen generellen Designvorschlag, um ein gut geschriebenes Programm veröffentlichen zu können.&lt;/p>
&lt;p>Im Kontext von &lt;a href="https://www.python.org/dev/peps/pep-0008">PEP 8&lt;/a>, ist dieser Beitrag unter &lt;em>&lt;a href="https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance">Design for Inheritance&lt;/a>&lt;/em> zu finden.&lt;/p>
&lt;p>Ab jetzt werden die Posts im Allgemeinen kürzer, damit man diese leichter verarbeiten kann.&lt;/p>
&lt;p>Entscheidet immer, ob die Methoden und Instanzvariablen einer Klasse (zusammenfassend: „Attribute“) öffentlich oder nicht öffentlich sein sollen. Im Zweifelsfall wählt man non-public; es ist einfacher, es später öffentlich zu machen, als ein öffentliches Attribut non-public zu machen.&lt;/p>
&lt;p>Öffentliche Attribute sind diejenigen, von denen man erwartet, dass sie von unabhängigen Clients der Klasse verwendet werden, mit der Verpflichtung, inkompatible Änderungen rückwärts zu vermeiden. Nicht-öffentliche Attribute sind solche, die nicht für die Verwendung durch Dritte bestimmt sind; Sie übernehmen keine Garantie dafür, dass nicht-öffentliche Attribute nicht verändert oder gar entfernt werden.&lt;/p>
&lt;p>Wir verwenden hier nicht den Begriff „privat“, da in Python kein Attribut wirklich privat ist (ohne erhöhten Arbeitsaufwand).&lt;/p>
&lt;p>Eine weitere Kategorie von Attributen sind diejenigen, die Teil der „Subklassen-API“ sind (in anderen Sprachen oft als „geschützt“ bezeichnet). Einige Klassen sind so konzipiert, dass sie vererbt werden können, um Aspekte des Verhaltens der Klasse zu erweitern oder zu modifizieren. Beim Design einer solchen Klasse ist darauf zu achten, dass explizit entschieden wird, welche Attribute öffentlich sind, die Teil der Unterklassen-API sind und wirklich nur von Ihrer Basisklasse verwendet werden dürfen.&lt;/p>
&lt;p>In diesem Sinne sind hier die pythonischen Richtlinien:&lt;/p>
&lt;ul>
&lt;li>Öffentliche Attribute sollten keine führenden Unterstriche enthalten.&lt;/li>
&lt;li>Wenn der öffentliche Attributname mit einem reservierten Schlüsselwort kollidiert, hänge einen einzelnen nachlaufenden Unterstrich an deinen Attributnamen an. Dies ist einer Abkürzung oder fehlerhaften Schreibweise vorzuziehen. (Ungeachtet dieser Regel ist „cls“ jedoch die bevorzugte Schreibweise für jede Variable oder jedes Argument, von dem bekannt ist, dass es sich um eine Klasse handelt, insbesondere für das erste Argument einer Klassenmethode.)
&lt;ul>
&lt;li>Hinweis 1: Siehe die Empfehlung für &lt;a href="https://zrezai-dev.de/python/pep-8/#klassennamen">Argumentnamen für Klassenmethoden&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Für einfache öffentliche Datenattribute ist es am besten, nur den Attributnamen ohne komplizierte Accessor/Mutator-Methoden zu verwenden. Denke daran, dass Python einen einfachen Weg zur zukünftigen Verbesserung bietet, falls du feststellst, dass ein einfaches Datenattribut benötigt wird, um das Funktionsverhalten zu verbessern. In diesem Fall solltest du Eigenschaften verwenden, um die funktionale Implementierung hinter einer einfachen Syntax für den Zugriff auf Datenattribute zu verstecken.
&lt;ul>
&lt;li>Hinweis 1: Eigenschaften funktionieren nur bei Klassen mit neuem Stil.&lt;/li>
&lt;li>Hinweis 2: Es ist zu versuchen, die Nebenwirkungen des Funktionsverhaltens frei zu halten, obwohl Nebenwirkungen wie das Caching im Allgemeinen in Ordnung sind.&lt;/li>
&lt;li>Hinweis 3: Vermeidung der Verwendung von Eigenschaften für rechenintensive Operationen; die Attributnotation lässt den Aufrufer glauben, dass der Zugriff (relativ) billig ist.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wenn die Klasse für die Unterklasse vorgesehen ist und Attribute hat, die nicht von Unterklassen verwendet werden sollen, sollten solche mit doppelten führenden Unterstrichen und ohne nachgestellte Unterstriche benannt werden. Dies ruft Pythons Mechanismus zur Namenszerlegung auf, bei dem der Name der Klasse in den Attributnamen zerlegt wird. Dies hilft, Kollisionen von Attributnamen zu vermeiden, falls Unterklassen versehentlich Attribute mit dem gleichen Namen enthalten.
&lt;ul>
&lt;li>Hinweis 1: Es wird nur der einfache Klassenname im manipulierten Namen verwendet, so dass man, wenn eine Unterklasse sowohl den gleichen Klassennamen als auch den gleichen Attributnamen wählt, trotzdem Namenskollisionen erhalten kann.&lt;/li>
&lt;li>Hinweis 2: Das Verwalten von Namen kann bestimmte Verwendungen, wie Debugging und &lt;code>getattr()&lt;/code>, weniger komfortabel machen. Der Algorithmus zur Namensverzerrung ist jedoch gut dokumentiert und manuell leicht durchführbar.&lt;/li>
&lt;li>Hinweis 3: Nicht jeder mag es, Namen zu verfälschen. Versucht, die Notwendigkeit, versehentliche Namenskonflikte zu vermeiden, mit der möglichen Nutzung durch fortgeschrittene Anwender in Einklang zu bringen.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
- https://zrezai-dev.de/python/pep/pep-8-design/ -</description></item><item><title>PEP 8 – Die Schönheit von Python</title><link>https://zrezai-dev.de/python/pep-8/</link><pubDate>Thu, 14 Feb 2019 08:05:49 +0000</pubDate><guid>https://zrezai-dev.de/python/pep-8/</guid><description>Zadjad Rezai. https://zrezai-dev.de/python/pep-8/ -&lt;p>Mein erster Blog-Eintrag sollte ein Eintrag sein, den man immer und immer wieder erleben kann – ein Eintrag, der nicht langweilig wird – nun ja langweilig mag er werden, aber er sollte definitiv nicht so leicht zu merken sein, dass man in seiner professionellen Laufbahn nicht noch einmal drauf schauen möchte. Als Python Enthusiast gibt es für mich kein besseres erstes Thema als ein &lt;a href="https://www.python.org/dev/peps/">PEP (Python Enhancement Proposal)&lt;/a> – zu Deutsch „Vorschlag zur Python-Verbesserung“ – ein Designdokument, das der Python-Community Informationen liefert oder ein neues Feature für Python, seine Prozesse oder Umgebung beschreibt.&lt;/p>
&lt;p>&lt;strong>Und welches PEP ist schöner als&lt;/strong> &lt;a href="https://www.python.org/dev/peps/pep-0008/">&lt;strong>PEP 8&lt;/strong>&lt;/a>&lt;strong>?&lt;/strong>&lt;/p>
&lt;p>PEP 8 das, wie der Name schon sagt, 8. PEP mit dem Titel „Style Guide für Python-Code“ – darin werden die wichtigsten Stil-Vorschläge beschrieben und erläutert.&lt;br>
In meinem Post möchte ich auf möchlichst alle Vorschläge aus PEP 8 eingehen und mit Code-Beispielen erläutern.&lt;/p>
&lt;p>Der Besitz eines Style Guides ist überaus wichtig, sobald jemand den geschrieben Code lesen soll. Normalerweise schreibt man Code, damit jemand ihn nutzt, davon profitiert und ggf. daran weiterarbeitet oder dadurch etwas neues lernt. Code ist nicht einfach nur einmal geschrieben und nie wieder mehr gelesen, denn:&lt;/p>
&lt;blockquote>
&lt;p>“Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. [Therefore,] making it easy to read makes it easier to write.”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Wahrlich das Verhältnis von Zeitaufwand zum Lesen und Schreiben liegt weit über 10 zu 1. Wir lesen ständig alten Code als Teil der Bemühungen, neuen Code zu schreiben. …. [Daher] ist es einfacher zu schreiben, wenn es sich leicht liest.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>‒ &lt;strong>Robert C. Martin&lt;/strong>, Clean Code: A Handbook of Agile Software Craftsmanship&lt;/p>
&lt;/blockquote>
&lt;p>Python, als eine Sprache mit einer Community, die sehr viel Wert auf Ästhetik legt, hat glücklicherweise einen offiziellen Style Guide, den man immer beachten sollte, außer das Team worin man arbeitet nutzt einen eigenen Style Guide. Als bekanntes Beispiel kann man Googles Python Style Guide sehen, den man nur nutzen sollte, wenn man an Google-Projekten arbeitet oder wenn das eigene Team/Unternehmen sich dazu entschlossen hat den Google-Standard zu nutzen.&lt;/p>
&lt;p>Sollte man keinen Style Guide nutzen, ist es dringlichst empfohlen in Zusammenarbeit mit den Mitarbeitern einen auszusuchen! Ohne Style Guide ist das Debuggen, Verbessern, Erweitern immens schwer – natürlich gibt es außer dem Style Guide noch viele andere Dinge, die man als professioneller Programmierer beachten muss. Es gibt neben dem Stil natürlich auch Code-Architektur, generelle Prinzipien für Code-Qualität und vieles mehr, was ich in Zukunft angehen möchte.&lt;/p>
&lt;p>Dieser Post kann grundsätzlich als eine freie Übersetzung und Kommentierung des PEP 8-Eintrages der Python-Community gesehen werden.&lt;/p>
&lt;hr>
&lt;h2 id="einleitung">Einleitung&lt;/h2>
&lt;p>PEP 8 enthält die Coding-Konventionen für Python-Code, der die Standardbibliothek in der Haupt-Python-Distribution umfasst. Beachtet ggf. die &lt;a href="https://www.python.org/dev/peps/pep-0007">begleitende informative PEP&lt;/a>, die Stilrichtlinien für C-Code in der C-Implementierung von Python beschreibt.&lt;/p>
&lt;p>PEP8 und &lt;a href="https://www.python.org/dev/peps/pep-0257/">PEP 257 (Docstring Conventions)&lt;/a> wurden von Guido van Rossums erstem Python Style Guide Essay übernommen, mit einigen Ergänzungen aus Barry Warsaws Style Guide.&lt;/p>
&lt;p>Dieser Style Guide entwickelt sich im Laufe der Zeit weiter, da zusätzliche Konventionen identifiziert werden und vergangene Konventionen durch Änderungen in der Sprache selbst obsolet werden.&lt;/p>
&lt;p>Viele Projekte haben ihre eigenen Codierungsstilrichtlinien. Im Falle von Konflikten haben solche projektspezifischen Leitfäden für dieses Projekt Vorrang.&lt;/p>
&lt;h2 id="übersicht">Übersicht&lt;/h2>
&lt;p>Eine kurze Übersicht über alle PEP 8 Regeln. Natürlich soll die Übersicht keine komplette Anleitung sein, sie versucht nur kurz und bündig zusammenzufassen.&lt;/p>
&lt;p>Für Beispiele, Erklärungen und mehr Informationen, könnt ihr einfach weiterlesen.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Nr.&lt;/strong>&lt;/td>
&lt;td>&lt;strong>Regel&lt;/strong>&lt;/td>
&lt;td>&lt;strong>Bedeutung&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Identation&lt;/td>
&lt;td>4 Leerzeichen, keine Tabs!&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Maximale Zeilenlänge&lt;/td>
&lt;td>– 79 Chars für Code &lt;br>– 72 Chars für Commentare, Docstrings &lt;br> Heutzutage nutzt man normalerweise mehr, das ist sehr teamspezifisch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Zeilenumbrüche bei Operatornutzung&lt;/td>
&lt;td>Ein Zeilenumbruch sollte vor einem Operator erscheinen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>Leerzeilen&lt;/td>
&lt;td>– Top-Level-Funktionen und Klassenfunktionen müssen mit zwei leeren Zeilen umgeben sein&lt;br>– Methoden Definitionen innerhalb von Klassen werden mit einer Leerzeile umgeben&lt;br>– Ggf. weitere Leerzeile, um Gruppen zu trennen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>Kodierung der Quelldatei&lt;/td>
&lt;td>– Code im Core sollte immer UTF-8 sein (oder ASCII in Python2)&lt;br>– Dateien, die ASCII (Python2) oder UTF-8 (Python3) nutzen, sollten keine Kodierungdeklaration haben.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>Imports&lt;/td>
&lt;td>– Ein Import pro Zeile, außer bei from X import y&lt;br>– Immer am Anfang der Datei (nach Kommentaren und Docstrings)&lt;br>– Absolute imports sind empfohlen&lt;br>– Wildcard imports (&lt;code>from &lt;module> import *&lt;/code>) sollten nicht genutzt werden&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>Dunder Namen&lt;/td>
&lt;td>– Nach den Module-Docstrings, aber vor den Imports&lt;br>– Aber trotzdem nach &lt;code>from __future__ import &amp;lt;&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>Anführungszeichen&lt;/td>
&lt;td>– ‚ und „, sind beide akzeptable&lt;br>– Man sollte aber immer beim ausgewähltem bleiben&lt;br>– Bei docstrings sollte man ausschließlich doppelte Anführungszeichen nutzen (PEP 257)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>Leerzeichen&lt;/td>
&lt;td>Siehe &lt;a href="#9-leerzeichen">Leerzeichen&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;!--nextpage-->
&lt;h2 id="1-einrückung">1. Einrückung&lt;/h2>
&lt;p>Verwende 4 Leerzeichen pro Einrückungsebene.&lt;/p>
&lt;p>Fortsetzungszeilen sollten umhüllte Elemente entweder vertikal mit der impliziten Linie von Python ausrichten, die in Klammern &lt;code>()&lt;/code>, eckigen Klammern &lt;code>[]&lt;/code> oder geschweifte Klammern &lt;code>{}&lt;/code> zusammengefügt wird, oder mit einer hängenden Einrückung. Bei der Verwendung einer hängenden Einrückung ist folgendes zu beachten: &lt;em>In der ersten Zeile sollten keine Argumente vorhanden sein und weitere Einzüge sollten verwendet werden, um sich klar als Fortsetzungszeile zu unterscheiden.&lt;/em>&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># Aligned with opening delimiter.&lt;/span>
foo &lt;span style="color:#666">=&lt;/span> long_function_name(var_one, var_two,
var_three, var_four)
&lt;span style="color:#080;font-style:italic"># Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">long_function_name&lt;/span>(
var_one, var_two, var_three,
var_four):
&lt;span style="color:#a2f;font-weight:bold">print&lt;/span>(var_one)
&lt;span style="color:#080;font-style:italic"># Hanging indents should add a level.&lt;/span>
foo &lt;span style="color:#666">=&lt;/span> long_function_name(
var_one, var_two,
var_three, var_four)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># Arguments on first line forbidden when not using vertical alignment.&lt;/span>
foo &lt;span style="color:#666">=&lt;/span> long_function_name(var_one, var_two,
var_three, var_four)
&lt;span style="color:#080;font-style:italic"># Further indentation required as indentation is not distinguishable.&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">long_function_name&lt;/span>(
var_one, var_two, var_three,
var_four):
&lt;span style="color:#a2f;font-weight:bold">print&lt;/span>(var_one)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Die 4-Leerzeichen-Regel ist optional bei Fortsetzungszeilen.&lt;/p>
&lt;p>Optional:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># Hanging indents *may* be indented to other than 4 spaces.&lt;/span>
foo &lt;span style="color:#666">=&lt;/span> long_function_name(
var_one, var_two,
var_three, var_four)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wenn der bedingte Teil einer &lt;code>if-Anweisung&lt;/code> lang genug ist, um verlangen zu können, dass diese über mehrere Zeilen geschrieben wird, ist es erwähnenswert, dass die Kombination aus einem zweistelligen Schlüssenwort (z.B. &lt;code>if&lt;/code>), einem Leerzeichen und einer öffnenden Klammer, automatisch eine 4-Leerzeichen-Einrückung für die nächsten Zeilen erstellt.&lt;/p>
&lt;p>Dieses Feature (not a Bug!) kann zu visuellen Konflikten mit der eingerückten Codefolge innerhalb der &lt;code>if-Anweisung&lt;/code>führen, die automatisch auch mit 4 Stellen eingerückt wäre. PEP 8 nimmt keine explizite Position ein, wie (oder ob) solche bedingten Linien weiter visuell von der verschachtelten Suite innerhalb der &lt;code>if-Anweisung&lt;/code>unterschieden werden sollen. Zu den akzeptablen Optionen in solchen Situationen gehören, sind aber nicht beschränkt auf:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#080;font-style:italic"># No extra indentation.&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (this_is_one_thing &lt;span style="color:#a2f;font-weight:bold">and&lt;/span>
that_is_another_thing):
do_something()
&lt;span style="color:#080;font-style:italic"># Add a comment, which will provide some distinction in editors&lt;/span>
&lt;span style="color:#080;font-style:italic"># supporting syntax highlighting.&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (this_is_one_thing &lt;span style="color:#a2f;font-weight:bold">and&lt;/span>
that_is_another_thing):
&lt;span style="color:#080;font-style:italic"># Since both conditions are true, we can frobnicate.&lt;/span>
do_something()
&lt;span style="color:#080;font-style:italic"># Add some extra indentation on the conditional continuation line.&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> (this_is_one_thing
&lt;span style="color:#a2f;font-weight:bold">and&lt;/span> that_is_another_thing):
do_something()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Gerne auch die Diskussion unter #Zeilenumbrüche bei Operatornutzung lesen.&lt;/em>&lt;/p>
&lt;p>Die abschließende Klammer bei mehrzeiligen Konstrukten kann sich entweder unter dem ersten Nicht-Leerzeichen der letzten Zeile der Liste wie in:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">my_list &lt;span style="color:#666">=&lt;/span> [
&lt;span style="color:#666">1&lt;/span>, &lt;span style="color:#666">2&lt;/span>, &lt;span style="color:#666">3&lt;/span>,
&lt;span style="color:#666">4&lt;/span>, &lt;span style="color:#666">5&lt;/span>, &lt;span style="color:#666">6&lt;/span>,
]
result &lt;span style="color:#666">=&lt;/span> some_function_that_takes_arguments(
&lt;span style="color:#b44">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;c&amp;#39;&lt;/span>,
&lt;span style="color:#b44">&amp;#39;d&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;e&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;f&amp;#39;&lt;/span>,
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>oder es kann unter dem ersten Zeichen der Zeile, die das mehrzeilige Konstrukt startet, aufgereiht sein, wie in:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">my_list &lt;span style="color:#666">=&lt;/span> [
&lt;span style="color:#666">1&lt;/span>, &lt;span style="color:#666">2&lt;/span>, &lt;span style="color:#666">3&lt;/span>,
&lt;span style="color:#666">4&lt;/span>, &lt;span style="color:#666">5&lt;/span>, &lt;span style="color:#666">6&lt;/span>,
]
result &lt;span style="color:#666">=&lt;/span> some_function_that_takes_arguments(
&lt;span style="color:#b44">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;c&amp;#39;&lt;/span>,
&lt;span style="color:#b44">&amp;#39;d&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;e&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;f&amp;#39;&lt;/span>,
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="21-tabs-oder-leerzeichen">2.1 Tabs oder Leerzeichen?&lt;/h4>
&lt;p>Leerzeichen sind die bevorzugte Einrückungsmethode.&lt;/p>
&lt;p>Tabs sollten nur verwendet werden, um mit Code konsistent zu bleiben, der bereits mit Tabs eingerückt ist.&lt;/p>
&lt;p>Python3 erlaubt es nicht, die Verwendung von Tabs und Leerzeichen für die Einrückung zu vermischen.&lt;/p>
&lt;p>Python2-Code, der mit einer Mischung aus Tabs und Leerzeichen eingerückt ist, sollte in die ausschließliche Verwendung von Leerzeichen umgewandelt werden.&lt;/p>
&lt;p>Wenn der Python2-Befehlszeileninterpreter mit der Option &lt;code>-t&lt;/code> aufgerufen wird, gibt er Warnungen über Code aus, der Tabs und Leerzeichen illegal vermischt. Bei der Verwendung von &lt;code>-tt&lt;/code> werden diese Warnungen zu Fehlern. Diese Optionen sind sehr empfehlenswert!&lt;/p>
&lt;!--nextpage-->
&lt;h3 id="2-maximale-zeilenlänge">2. Maximale Zeilenlänge&lt;/h3>
&lt;p>Alle Zeilen sollte auf 79 Zeichen begrenzt werden.&lt;/p>
&lt;p>Für lange Textblöcke mit weniger strukturellen Einschränkungen (Dokumente oder Kommentare) sollte die Zeilenlänge auf 72 Zeichen begrenzt werden.&lt;/p>
&lt;p>Die Begrenzung der erforderlichen Editorfensterbreite ermöglicht es, mehrere Dateien nebeneinander zu öffnen und funktioniert gut bei der Verwendung von Code Review Tools, die die beiden Versionen in benachbarten Spalten darstellen.&lt;/p>
&lt;p>Die standardmäßige Einbettung in die meisten Tools stört die visuelle Struktur des Codes und erschwert das Verständnis. Die Grenzen werden so gewählt, dass bei Editoren mit einer Fensterbreite von 80 kein Umbruch stattfindet, auch wenn das Tool beim Umbruch von Zeilen eine Markierungssilbe in der letzten Spalte platziert. Einige webbasierte Tools bieten möglicherweise überhaupt keinen dynamischen Zeilenumbruch.&lt;/p>
&lt;p>Einige Teams favorisieren eine längere Zeilenlänge. Für Code, der ausschließlich oder hauptsächlich von einem Team gepflegt wird, das sich in dieser Angelegenheit einigen kann, ist es in Ordnung, die nominale Zeilenlänge von 80 auf 100 Zeichen zu erhöhen (was die maximale Länge auf 99 Zeichen erhöht), vorausgesetzt, dass &lt;strong>Kommentare und Dokumentierungen noch mit 72 Zeichen&lt;/strong> ummantelt sind.&lt;/p>
&lt;p>Die Python-Standardbibliothek ist konservativ und erfordert eine Begrenzung der Zeilen auf 79 Zeichen (und der Docstrings/Kommentare auf 72), deshalb muss jeder, der im Python-Projekt mitwirken möchte, die 79-Zeichen-Regel befolgen.&lt;/p>
&lt;p>Die bevorzugte Art, lange Zeilen zu umbrechen, ist die Verwendung von Pythons impliziter Zeilenfortsetzung innerhalb von allen Klammerarten. Lange Zeilen können über mehrere Zeilen gebrochen werden, indem Ausdrücke in Klammern eingeschlossen werden. Diese sollten anstelle eines Backslash für die Zeilenfortsetzung verwendet werden.&lt;/p>
&lt;p>Backslashes können manchmal noch angemessen sein. Beispielsweise können lange, mehrere mit Anweisungen keine implizite Fortsetzung verwenden, so dass Backslashes akzeptabel sind:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">with&lt;/span> &lt;span style="color:#a2f">open&lt;/span>(&lt;span style="color:#b44">&amp;#39;/path/to/some/file/you/want/to/read&amp;#39;&lt;/span>) &lt;span style="color:#a2f;font-weight:bold">as&lt;/span> file_1, \
&lt;span style="color:#a2f">open&lt;/span>(&lt;span style="color:#b44">&amp;#39;/path/to/some/file/being/written&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#a2f;font-weight:bold">as&lt;/span> file_2:
file_2&lt;span style="color:#666">.&lt;/span>write(file_1&lt;span style="color:#666">.&lt;/span>read())
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ein weiterer solcher Fall ist bei &lt;code>assert&lt;/code>-Anweisung.&lt;/p>
&lt;p>Achtet darauf, dass die fortlaufende Zeile entsprechend eingerückt ist.&lt;/p>
&lt;h3 id="zeilenumbrueche-bei-operatornutzung">3. Zeilenumbrüche bei Operatornutzung&lt;/h3>
&lt;p>Eine gute Merkregel für korrekte Zeilenumbrüche bei Operatornutzung, wäre sich einfach die standarmäßige mathematische Darstellung zu nutzen.&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">income &lt;span style="color:#666">=&lt;/span> (gross_wages
&lt;span style="color:#666">+&lt;/span> taxable_interest
&lt;span style="color:#666">+&lt;/span> (dividends &lt;span style="color:#666">-&lt;/span> qualified_dividends)
&lt;span style="color:#666">-&lt;/span> ira_deduction
&lt;span style="color:#666">-&lt;/span> student_loan_interest)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Donald Knuth erklärt die traditionelle Regel in seiner Reihe „Computers and Typesetting“: &lt;em>„Obwohl Formeln innerhalb eines Absatzes immer nach binären Operationen und Beziehungen unterbrochen werden, werden angezeigte Formeln immer vor binären Operationen unterbrochen.“&lt;/em>&lt;/p>
&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">income &lt;span style="color:#666">=&lt;/span> (gross_wages &lt;span style="color:#666">+&lt;/span>
taxable_interest &lt;span style="color:#666">+&lt;/span>
(dividends &lt;span style="color:#666">-&lt;/span> qualified_dividends) &lt;span style="color:#666">-&lt;/span>
ira_deduction &lt;span style="color:#666">-&lt;/span>
student_loan_interest)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Im Python-Code ist es zulässig, vor oder nach einem binären Operator zu brechen, solange die Konvention lokal konsistent ist. Für neuen Code wird der Stil von Knuth vorgeschlagen.&lt;/p>
&lt;h3 id="4-leerzeilen">4. Leerzeilen&lt;/h3>
&lt;p>Umgebe die oberste Funktions- und Klassendefinition mit zwei Leerzeilen.&lt;/p>
&lt;p>Methodendefinitionen innerhalb einer Klasse werden von einer einzigen Leerzeile umgeben.&lt;/p>
&lt;p>Zusätzliche Leerzeilen können (sparsam) verwendet werden, um Gruppen von verwandten Funktionen zu trennen. Leerzeilen können zwischen einem Haufen verwandter Einzeiler (z.B. einer Reihe von Dummy-Implementierungen) weggelassen werden.&lt;/p>
&lt;p>Verwende Leerzeilen in Funktionen sparsam, um logische Abschnitte zu kennzeichnen.&lt;/p>
&lt;p>Python akzeptiert Control-L (d.h. ^L) Form Feed Zeichen als Leerzeichen; Viele Tools behandeln dieses Zeichen als Seitentrenner, so dass man damit Seiten von verwandten Abschnitten der Datei trennen kann. Zu beachten ist, dass einige Editoren und webbasierte Code-Betrachter control-L möglicherweise nicht als Formular-Feed erkennen und an seiner Stelle ein anderes Silbenzeichen anzeigen.&lt;/p>
&lt;!--nextpage-->
&lt;h3 id="5-kodierung-der-quelldatei">5. Kodierung der Quelldatei&lt;/h3>
&lt;p>Grundsätzlich sollte man bei Python3 immer UTF-8 nutzen, bei Python2 ASCII. Wenn man die empfohlene Kodierung nutzt, sollte man die Kodierung nicht extra deklarieren.&lt;/p>
&lt;p>In der Standardbibliothek sollten nicht-standardmäßige Kodierungen nur zu Testzwecken verwendet werden oder wenn ein Kommentar oder ein Docstring einen Autorennamen erwähnen muss, der Nicht-ASCII-Zeichen enthält; andernfalls ist die Verwendung von \x, \u, \U, \U oder \N Escapes der bevorzugte Weg, um Nicht-ASCII-Daten in Zeichenkettenliteralen aufzunehmen.&lt;/p>
&lt;p>Für Python 3.0 und darüber hinaus ist für die Standardbibliothek die folgende Richtlinie vorgeschrieben (siehe &lt;a href="https://www.python.org/dev/peps/pep-3131/">PEP 3131&lt;/a>): Alle Bezeichner in der Python-Standardbibliothek &lt;strong>müssen&lt;/strong> nur ASCII-Bezeichner verwenden, und &lt;strong>sollten&lt;/strong>, wo immer möglich, englische Wörter verwenden (in vielen Fällen werden Abkürzungen und Fachbegriffe verwendet, die nicht Englisch sind). Darüber hinaus müssen Stringliterale und Kommentare ebenfalls in ASCII vorliegen. Die einzigen Ausnahmen sind&lt;/p>
&lt;ul>
&lt;li>Testfälle, die die Nicht-ASCII-Funktionen testen&lt;/li>
&lt;li>Namen von Autoren. Verfasser, deren Namen nicht auf dem lateinischen Alphabet basieren (lateinisch-1, ISO/IEC 8859-1 Zeichensatz), &lt;strong>müssen&lt;/strong> eine Transliteration ihrer Namen in diesem Zeichensatz angeben.&lt;/li>
&lt;/ul>
&lt;p>Open-Source-Projekte mit einem globalen Publikum werden angehalten, eine ähnliche Politik zu verfolgen.&lt;/p>
&lt;h3 id="6-imports">6. Imports&lt;/h3>
&lt;h4 id="61-imports-sollten-auf-eigenen-zeilen-stehen">6.1 Imports sollten auf eigenen Zeilen stehen&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">Yes: &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">os&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">sys&lt;/span>
No: &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">sys&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#00f;font-weight:bold">os&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Das hier ist aber auch akzeptabel:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">subprocess&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> Popen, PIPE
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="62-imports-sollten-immer-oben-stehen">6.2 Imports sollten immer oben stehen&lt;/h4>
&lt;p>&lt;code>Imports&lt;/code> werden immer ganz oben in der Datei platziert, direkt nach jedem Modulkommentar und den Docstrings, vor den Modulglobalen und Konstanten.&lt;/p>
&lt;p>Importe sollten in der folgenden Reihenfolge zusammengefasst werden:&lt;/p>
&lt;ol>
&lt;li>Standardbibliotheken importe&lt;/li>
&lt;li>Importe von nahestehenden Drittanbietern&lt;/li>
&lt;li>Lokale Anwendung / bibliotheksspezifische Importe&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>Es sollte eine Leerzeile zwischen jeder Gruppe von Importen eingefügt werden.&lt;/p>
&lt;h4 id="63-absolute-importe-sind-empfohlen">6.3 Absolute importe sind empfohlen&lt;/h4>
&lt;p>Absolute Importe werden empfohlen, da sie in der Regel besser lesbar sind und bei falscher Konfiguration des Importsystems (z.B. wenn ein Verzeichnis innerhalb eines Pakets auf sys.path landet) tendenziell ein besseres Verhalten zeigen (oder zumindest bessere Fehlermeldungen geben):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">mypkg.sibling&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">mypkg&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> sibling
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">mypkg.sibling&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> example
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Allerdings sind explizite relative Importe eine akzeptable Alternative zu absoluten Importen, insbesondere bei komplexen Paketlayouts, bei denen die Verwendung von absoluten Importen unnötig umfangreich wäre:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">.&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> sibling
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">.sibling&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> example
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Standard-Bibliothekscode sollte komplexe Paketlayouts vermeiden und immer absolute Importe verwenden.&lt;/p>
&lt;p>&lt;strong>Implizite relative Importe sollten niemals verwendet werden und wurden in Python 3 entfernt.&lt;/strong>&lt;/p>
&lt;h4 id="64-klassen-enthaltendes-module">6.4 Klassen enthaltendes Module&lt;/h4>
&lt;p>Beim Import einer Klasse aus einem klassenhaltigen Modul ist es normalerweise in Ordnung, dies zu schreiben:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">myclass&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> MyClass
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">foo.bar.yourclass&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> YourClass
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wenn diese Schreibweise zu Konflikten zwischen lokalen Namen führt, dann schreibt man sie explizit:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">myclass&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">foo.bar.yourclass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>und verwende &lt;code>myclass.MyClass&lt;/code> und &lt;code>foo.bar.yourclass.YourClass&lt;/code>.&lt;/p>
&lt;h4 id="65-wildcard-imports">6.5 Wildcard imports&lt;/h4>
&lt;p>Wildcard-Importe (&lt;code>from &amp;lt;module&amp;gt; import *&lt;/code>) sollten vermieden werden, da sie unklar machen, welche Namen im Namensraum vorhanden sind, was sowohl die Leser als auch viele automatisierte Tools verwirrt. Es gibt einen vertretbaren Anwendungsfall für einen Wildcard-Import, nämlich die Wiederveröffentlichung eines internen Interfaces als Teil einer öffentlichen API (z.B. das Überschreiben einer reinen Python-Implementierung eines Interfaces mit den Definitionen eines optionalen Accelerator-Moduls ohne vorherige Kenntnis der genauen zu überschreibenden Definitionen).&lt;/p>
&lt;p>Bei der Neuveröffentlichung von Namen auf diese Weise gelten weiterhin die folgenden Richtlinien für öffentliche und interne Schnittstellen.&lt;/p>
&lt;!--nextpage-->
&lt;h3 id="7-dunder-namen">7. Dunder Namen&lt;/h3>
&lt;p>&lt;em>Dunders&lt;/em> auf Modulebene (d.h. Namen mit zwei führenden und zwei nachgeordneten Unterstrichen) wie &lt;code>__all__&lt;/code>, &lt;code>__author__&lt;/code>, &lt;code>__version__&lt;/code>, etc. sollten nach der Moduldokumentation, aber vor allen Importanweisungen mit Ausnahme von &lt;code>__future__&lt;/code> Importen platziert werden. Python schreibt vor, dass Future-Importe im Modul vor jedem anderen Code außer Docstrings erscheinen müssen:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;This is the example module.
&lt;/span>&lt;span style="color:#b44">
&lt;/span>&lt;span style="color:#b44">This module does stuff.
&lt;/span>&lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">__future__&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> barry_as_FLUFL
__all__ &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#b44">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;c&amp;#39;&lt;/span>]
__version__ &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">&amp;#39;0.1&amp;#39;&lt;/span>
__author__ &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">&amp;#39;Cardinal Biggles&amp;#39;&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">os&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">import&lt;/span> &lt;span style="color:#00f;font-weight:bold">sys&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="8-anführungszeichen">8. Anführungszeichen&lt;/h3>
&lt;p>In Python sind einfach angeführte Strings und doppelt angeführte Strings identisch. Dieser PEP gibt keine Empfehlung dazu ab. Wählt eine Regel und haltet euch daran. Wenn eine Zeichenkette jedoch einfache oder doppelte Anführungszeichen enthält, verwendet das andere, um Backslashes in der Zeichenkette zu vermeiden. Es verbessert die Lesbarkeit.&lt;/p>
&lt;p>Verwenden Sie bei Zeichenketten mit drei Anführungszeichen immer doppelte Anführungszeichen, um mit der Docstring-Konvention in &lt;a href="https://www.python.org/dev/peps/pep-0257/">PEP 257&lt;/a> konsistent zu sein.&lt;/p>
&lt;h3 id="9-leerzeichen">9. Leerzeichen&lt;/h3>
&lt;h4 id="91-direkt-in-klammern">9.1 Direkt in Klammern&lt;/h4>
&lt;p>Ja: &lt;code>spam(ham[1], {eggs: 2})&lt;/code>&lt;br>
Nein: &lt;code>spam( ham[ 1 ], { eggs: 2 } )&lt;/code>&lt;/p>
&lt;h4 id="92-zwischen-letztem-komma-und-schließender-klammer">9.2 Zwischen letztem Komma und schließender Klammer&lt;/h4>
&lt;p>Ja: &lt;code>foo = (0,)&lt;/code>&lt;br>
Nein: &lt;code>bar = (0, )&lt;/code>&lt;/p>
&lt;h4 id="93-unmittelbar-vor-einem-komma-semikolon-oder-doppelpunkt">9.3 Unmittelbar vor einem Komma, Semikolon oder Doppelpunkt&lt;/h4>
&lt;p>Ja: &lt;code>if x == 4: print x, y; x, y = y, x&lt;/code>&lt;br>
Nein: &lt;code>if x == 4 : print x , y ; x , y = y , x&lt;/code>&lt;/p>
&lt;h4 id="94-in-slices">9.4 In Slices&lt;/h4>
&lt;p>In einem Slice verhält sich der Doppelpunkt jedoch wie ein binärer Operator und sollte auf beiden Seiten gleiche Mengen aufweisen (er wird als der Operator mit der niedrigsten Priorität behandelt). In einem erweiterten Slice müssen beide Doppelpunkte den gleichen Abstand aufweisen. Ausnahme: Wenn ein Slice-Parameter weggelassen wird, wird der Platz weggelassen In einem Slice verhält sich der Doppelpunkt jedoch wie ein binärer Operator und sollte auf beiden Seiten gleiche Mengen aufweisen (er wird als der Operator mit der niedrigsten Priorität behandelt). In einem erweiterten Slice müssen beide Doppelpunkte den gleichen Abstand aufweisen. Ausnahme: Wenn ein Slice-Parameter weggelassen wird, wird der Platz weggelassen&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">ham[&lt;span style="color:#666">1&lt;/span>:&lt;span style="color:#666">9&lt;/span>], ham[&lt;span style="color:#666">1&lt;/span>:&lt;span style="color:#666">9&lt;/span>:&lt;span style="color:#666">3&lt;/span>], ham[:&lt;span style="color:#666">9&lt;/span>:&lt;span style="color:#666">3&lt;/span>], ham[&lt;span style="color:#666">1&lt;/span>::&lt;span style="color:#666">3&lt;/span>], ham[&lt;span style="color:#666">1&lt;/span>:&lt;span style="color:#666">9&lt;/span>:]
ham[lower:upper], ham[lower:upper:], ham[lower::step]
ham[lower&lt;span style="color:#666">+&lt;/span>offset : upper&lt;span style="color:#666">+&lt;/span>offset]
ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]
ham[lower &lt;span style="color:#666">+&lt;/span> offset : upper &lt;span style="color:#666">+&lt;/span> offset]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">ham[lower &lt;span style="color:#666">+&lt;/span> offset:upper &lt;span style="color:#666">+&lt;/span> offset]
ham[&lt;span style="color:#666">1&lt;/span>: &lt;span style="color:#666">9&lt;/span>], ham[&lt;span style="color:#666">1&lt;/span> :&lt;span style="color:#666">9&lt;/span>], ham[&lt;span style="color:#666">1&lt;/span>:&lt;span style="color:#666">9&lt;/span> :&lt;span style="color:#666">3&lt;/span>]
ham[lower : : upper]
ham[ : upper]
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="95-unmittelbar-vor-der-offenen-klammer-die-die-argumentenliste-eines-funktionsaufrufs-startet">9.5 Unmittelbar vor der offenen Klammer, die die Argumentenliste eines Funktionsaufrufs startet&lt;/h4>
&lt;p>Ja: &lt;code>foo(1)&lt;/code>&lt;br>
Nein: &lt;code>bar (1)&lt;/code>&lt;/p>
&lt;h4 id="96-unmittelbar-vor-der-offenen-klammer-die-eine-indexierung-oder-ein-slicing-startet">9.6 Unmittelbar vor der offenen Klammer, die eine Indexierung oder ein Slicing startet:&lt;/h4>
&lt;p>Ja: &lt;code>dct['key'] = lst[index]&lt;/code>&lt;br>
Nein: &lt;code>dct ['key'] = lst [index]&lt;/code>&lt;/p>
&lt;h4 id="97-mehr-als-ein-leerzeichen-um-einen-zugewiesenen-oder-anderen-operator-herum-um-ihn-miteinander-auszurichten">9.7 Mehr als ein Leerzeichen um einen zugewiesenen (oder anderen) Operator herum, um ihn miteinander auszurichten&lt;/h4>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">1&lt;/span>
y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">2&lt;/span>
long_variable &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">x &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">1&lt;/span>
y &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">2&lt;/span>
long_variable &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!--nextpage-->
&lt;h2 id="10-weitere-vorschläge">10. Weitere Vorschläge&lt;/h2>
&lt;h3 id="101-allgemein">10.1 Allgemein&lt;/h3>
&lt;ul>
&lt;li>Vermeidet überall nachschleppende Leerzeichen&lt;/li>
&lt;li>Folgende Operatoren immer mit einem Leerzeichen umgeben
&lt;ul>
&lt;li>Zuweisungen (=)&lt;/li>
&lt;li>Erweiterte Zuweisungen (+=, -=, etc.)&lt;/li>
&lt;li>Vergleiche (==, &amp;lt;, &amp;gt;, !=, &amp;lt;&amp;gt;, &amp;lt;=, &amp;gt;=, in, not in, is, is not)&lt;/li>
&lt;li>Bool’sche Ausdrücke (and, or, not)&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="1011-operatoren-mit-unterschiedlichen-prioritäten">10.1.1 Operatoren mit unterschiedlichen Prioritäten&lt;/h4>
&lt;p>Wenn Operatoren mit unterschiedlichen Prioritäten verwendet werden, empfiehlt es sich, Leerzeichen um die Operatoren mit der niedrigsten Priorität(en) hinzuzufügen. Verwendet euer eigenes Urteilsvermögen; jedoch nie mehr als ein Leerzeichen und habt immer die gleiche Menge an Leerzeichen auf beiden Seiten eines binären Operators.&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">i &lt;span style="color:#666">=&lt;/span> i &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>
submitted &lt;span style="color:#666">+=&lt;/span> &lt;span style="color:#666">1&lt;/span>
x &lt;span style="color:#666">=&lt;/span> x&lt;span style="color:#666">*&lt;/span>&lt;span style="color:#666">2&lt;/span> &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#666">1&lt;/span>
hypot2 &lt;span style="color:#666">=&lt;/span> x&lt;span style="color:#666">*&lt;/span>x &lt;span style="color:#666">+&lt;/span> y&lt;span style="color:#666">*&lt;/span>y
c &lt;span style="color:#666">=&lt;/span> (a&lt;span style="color:#666">+&lt;/span>b) &lt;span style="color:#666">*&lt;/span> (a&lt;span style="color:#666">-&lt;/span>b)i &lt;span style="color:#666">=&lt;/span> i &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">i&lt;span style="color:#666">=&lt;/span>i&lt;span style="color:#666">+&lt;/span>&lt;span style="color:#666">1&lt;/span>
submitted &lt;span style="color:#666">+=&lt;/span>&lt;span style="color:#666">1&lt;/span>
x &lt;span style="color:#666">=&lt;/span> x &lt;span style="color:#666">*&lt;/span> &lt;span style="color:#666">2&lt;/span> &lt;span style="color:#666">-&lt;/span> &lt;span style="color:#666">1&lt;/span>
hypot2 &lt;span style="color:#666">=&lt;/span> x &lt;span style="color:#666">*&lt;/span> x &lt;span style="color:#666">+&lt;/span> y &lt;span style="color:#666">*&lt;/span> y
c &lt;span style="color:#666">=&lt;/span> (a &lt;span style="color:#666">+&lt;/span> b) &lt;span style="color:#666">*&lt;/span> (a &lt;span style="color:#666">-&lt;/span> b)
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1012-funktionskommentare">10.1.2 Funktionskommentare&lt;/h4>
&lt;p>Funktionsanmerkungen sollten die normalen Regeln für Doppelpunkte verwenden und immer Leerzeichen um den -&amp;gt; Pfeil herum haben, falls vorhanden. Weitere Informationen über Funktionskommentare enthält der Abschnitt &lt;a href="#funktionsbeschreibungen">#Funktionsbeschreibung&lt;/a>.&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">munge&lt;/span>(&lt;span style="color:#a2f">input&lt;/span>: AnyStr): &lt;span style="color:#666">...&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">munge&lt;/span>() &lt;span style="color:#666">-&amp;gt;&lt;/span> AnyStr: &lt;span style="color:#666">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">munge&lt;/span>(&lt;span style="color:#a2f">input&lt;/span>:AnyStr): &lt;span style="color:#666">...&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">munge&lt;/span>()&lt;span style="color:#666">-&amp;gt;&lt;/span>PosInt: &lt;span style="color:#666">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1013-keine-leerzeichen-in-argumenten">10.1.3 Keine Leerzeichen in Argumenten&lt;/h4>
&lt;p>Benutze keine Leerzeichen um das Zeichen =, wenn es zur Angabe eines Schlüsselwortarguments verwendet wird, oder wenn es zur Angabe eines Standardwertes für einen nicht kommentierten Funktionsparameter verwendet wird.&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">complex&lt;/span>(real, imag&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">0.0&lt;/span>):
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> magic(r&lt;span style="color:#666">=&lt;/span>real, i&lt;span style="color:#666">=&lt;/span>imag)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">complex&lt;/span>(real, imag &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">0.0&lt;/span>):
&lt;span style="color:#a2f;font-weight:bold">return&lt;/span> magic(r &lt;span style="color:#666">=&lt;/span> real, i &lt;span style="color:#666">=&lt;/span> imag)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wenn man jedoch eine Argumentannotation mit einem Standardwert kombiniert, verwendet Leerzeichen um das = Zeichen herum:&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">munge&lt;/span>(sep: AnyStr &lt;span style="color:#666">=&lt;/span> None): &lt;span style="color:#666">...&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">munge&lt;/span>(&lt;span style="color:#a2f">input&lt;/span>: AnyStr, sep: AnyStr &lt;span style="color:#666">=&lt;/span> None, limit&lt;span style="color:#666">=&lt;/span>&lt;span style="color:#666">1000&lt;/span>): &lt;span style="color:#666">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">munge&lt;/span>(&lt;span style="color:#a2f">input&lt;/span>: AnyStr&lt;span style="color:#666">=&lt;/span>None): &lt;span style="color:#666">...&lt;/span>
&lt;span style="color:#a2f;font-weight:bold">def&lt;/span> &lt;span style="color:#00a000">munge&lt;/span>(&lt;span style="color:#a2f">input&lt;/span>: AnyStr, limit &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">1000&lt;/span>): &lt;span style="color:#666">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1014-keine-zusammengesetzten-anweisungen">10.1.4 Keine zusammengesetzten Anweisungen&lt;/h4>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> foo &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#b44">&amp;#39;blah&amp;#39;&lt;/span>:
do_blah_thing()
do_one()
do_two()
do_three()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lieber nicht:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> foo &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#b44">&amp;#39;blah&amp;#39;&lt;/span>: do_blah_thing()
do_one(); do_two(); do_three()
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1015-anweisungen-in-einer-zeile">10.1.5 Anweisungen in einer Zeile&lt;/h4>
&lt;p>Während es manchmal in Ordnung ist, ein if/for/while mit einem kleinen Anweisungsteil auf die gleiche Zeile zu setzen, sollte dies bei Mehrsatzanweisungen nie geschehen. Vermeidet auch das Falten so langer Linien!&lt;/p>
&lt;p>Lieber nicht:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> foo &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#b44">&amp;#39;blah&amp;#39;&lt;/span>: do_blah_thing()
&lt;span style="color:#a2f;font-weight:bold">for&lt;/span> x &lt;span style="color:#a2f;font-weight:bold">in&lt;/span> lst: total &lt;span style="color:#666">+=&lt;/span> x
&lt;span style="color:#a2f;font-weight:bold">while&lt;/span> t &lt;span style="color:#666">&amp;amp;&lt;/span>lt; &lt;span style="color:#666">10&lt;/span>: t &lt;span style="color:#666">=&lt;/span> delay()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Definitiv nicht:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> foo &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#b44">&amp;#39;blah&amp;#39;&lt;/span>: do_blah_thing()
&lt;span style="color:#a2f;font-weight:bold">else&lt;/span>: do_non_blah_thing()
&lt;span style="color:#a2f;font-weight:bold">try&lt;/span>: something()
&lt;span style="color:#a2f;font-weight:bold">finally&lt;/span>: cleanup()
do_one(); do_two(); do_three(&lt;span style="color:#a2f">long&lt;/span>, argument,
&lt;span style="color:#a2f">list&lt;/span>, like, this)
&lt;span style="color:#a2f;font-weight:bold">if&lt;/span> foo &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#b44">&amp;#39;blah&amp;#39;&lt;/span>: one(); two(); three()
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="102-folgekommas">10.2 Folgekommas&lt;/h3>
&lt;p>Nachfolgende Kommas sind in der Regel optional, außer wenn ein Tupel aus einem Element gebildet wird (und in Python 2 haben sie eine Semantik für die Print-Anweisung). Aus Gründen der Übersichtlichkeit wird empfohlen, letztere in (technisch redundante) Klammern zu setzen.&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">FILES &lt;span style="color:#666">=&lt;/span> (&lt;span style="color:#b44">&amp;#39;setup.cfg&amp;#39;&lt;/span>,)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Okay, aber verwirrend:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">FILES &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#b44">&amp;#39;setup.cfg&amp;#39;&lt;/span>,
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wenn Nachkommas redundant sind, sind sie oft hilfreich, wenn ein Versionskontrollsystem verwendet wird, bei dem erwartet wird, dass eine Liste von Werten, Argumenten oder importierten Elementen im Laufe der Zeit erweitert wird. Das Muster besteht darin, jeden Wert (usw.) einzeln auf eine Zeile zu setzen, wobei immer ein abschließendes Komma hinzugefügt wird, und die schließende Klammer in der nächsten Zeile hinzuzufügen. Es ist jedoch nicht sinnvoll, ein nachfolgendes Komma in der gleichen Zeile wie das abschließende Trennzeichen zu haben (außer im obigen Fall von Singleton-Tupeln).&lt;/p>
&lt;p>Ja:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">FILES &lt;span style="color:#666">=&lt;/span> [
&lt;span style="color:#b44">&amp;#39;setup.cfg&amp;#39;&lt;/span>,
&lt;span style="color:#b44">&amp;#39;tox.ini&amp;#39;&lt;/span>,
]
initialize(FILES,
error&lt;span style="color:#666">=&lt;/span>True,
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nein:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">FILES &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#b44">&amp;#39;setup.cfg&amp;#39;&lt;/span>, &lt;span style="color:#b44">&amp;#39;tox.ini&amp;#39;&lt;/span>,]
initialize(FILES, error&lt;span style="color:#666">=&lt;/span>True,)
&lt;/code>&lt;/pre>&lt;/div>&lt;!--nextpage-->
&lt;h3 id="103-kommentare">10.3 Kommentare&lt;/h3>
&lt;p>Kommentare, die dem Code widersprechen, sind schlimmer als keine Kommentare. Achte immer darauf, die Kommentare auf dem neuesten Stand zu halten, wenn sich der Code ändert!&lt;/p>
&lt;p>Kommentare sollten vollständige Sätze sein. Das erste Wort sollte groß geschrieben werden, es sei denn, es handelt sich um einen Bezeichner, der mit einem Kleinbuchstaben beginnt (ändert niemals die Schreibweise von Bezeichnern!).&lt;/p>
&lt;p>Blockkommentare bestehen im Allgemeinen aus einem oder mehreren Absätzen, die aus vollständigen Sätzen aufgebaut sind, wobei jeder Satz in einem Zeitraum endet.&lt;/p>
&lt;p>Bei mehrsätzigen Kommentaren empfiehlt es sich, nach einem Punkt zwei Leerzeichen zu verwenden, außer nach dem letzten Satz.&lt;/p>
&lt;p>Wenn du Englisch schreibst, folge Strunk and White.&lt;/p>
&lt;p>Python-Programmierer aus nicht englischsprachigen Ländern: Bitte schreibt eure Kommentare auf Englisch, es sei denn, ihr seid euch zu &lt;strong>120%&lt;/strong> sicher, dass der Code niemals von Personen gelesen wird, die eure Sprache nicht sprechen.&lt;/p>
&lt;h4 id="1031-block-kommentare">10.3.1 Block-Kommentare&lt;/h4>
&lt;p>Block-Kommentare gelten im Allgemeinen für einige (oder alle) folgenden Codezeilen und sind auf der gleichen Ebene wie dieser Code eingerückt. Jede Zeile eines Blockkommentars beginnt mit einem # und einem einzelnen Leerzeichen (es sei denn, es handelt sich um eingerückten Text innerhalb des Kommentars).&lt;/p>
&lt;p>Absätze innerhalb eines Blockkommentars werden durch eine Zeile mit einem einzelnen # getrennt.&lt;/p>
&lt;h4 id="1032-inline-kommentare">10.3.2 Inline-Kommentare&lt;/h4>
&lt;p>Sparsamer Einsatz von Inline-Kommentaren ist empfehlenswert.&lt;/p>
&lt;p>Ein Inline-Kommentar ist ein Kommentar in der gleichen Zeile wie eine Anweisung. Inline-Kommentare sollten durch mindestens zwei Leerzeichen von der Anweisung getrennt sein. Sie sollten mit einem # und einem einzelnen Leerzeichen beginnen.&lt;/p>
&lt;p>Inline-Kommentare sind unnötig und in der Tat ablenkend, wenn sie das Offensichtliche enthalten. Tu das nicht:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">x &lt;span style="color:#666">=&lt;/span> x &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span> &lt;span style="color:#080;font-style:italic"># Increment x&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aber manchmal macht das hier Sinn:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">x &lt;span style="color:#666">=&lt;/span> x &lt;span style="color:#666">+&lt;/span> &lt;span style="color:#666">1&lt;/span> &lt;span style="color:#080;font-style:italic"># Compensate for border&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="1033-dokumentations-strings-docstrings">10.3.3 Dokumentations-Strings (Docstrings)&lt;/h4>
&lt;p>Konventionen zum Schreiben guter Dokumentationszeichenketten (auch bekannt als „docstrings“) sind in &lt;a href="https://www.python.org/dev/peps/pep-0257/">PEP 257&lt;/a> verewigt.&lt;/p>
&lt;p>Verfasse Docstrings für alle öffentlichen Module, Funktionen, Klassen und Methoden. Docstrings sind für nicht-öffentliche Methoden nicht notwendig, aber Sie sollten einen Kommentar haben, der beschreibt, was die Methode tut. Dieser Kommentar sollte nach der Def-Zeile erscheinen.&lt;/p>
&lt;p>PEP 257 beschreibt gute Docstring-Konventionen. Am wichtigsten ist, dass das „““, das eine mehrzeilige Docstring beendet, in einer eigenen Zeile stehen sollte:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;Return a foobang
&lt;/span>&lt;span style="color:#b44">
&lt;/span>&lt;span style="color:#b44">Optional plotz says to frobnicate the bizbaz first.
&lt;/span>&lt;span style="color:#b44">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bei einzeiligen Docstrings halte bitte das Schließen „““ auf der gleichen Zeile.&lt;/p>
&lt;!--nextpage-->
&lt;h3 id="104-namenskonventionen">10.4 Namenskonventionen&lt;/h3>
&lt;p>Die Namenskonventionen der Python-Bibliothek sind ein wenig durcheinander, so dass man dies nie vollständig konsistent bekommen wird – dennoch hier sind die derzeit empfohlenen Namensstandards. Neue Module und Pakete (einschließlich Frameworks von Drittanbietern) sollten nach diesen Standards geschrieben werden, aber wenn eine bestehende Bibliothek einen anderen Stil hat, wird die interne Konsistenz bevorzugt.&lt;/p>
&lt;h4 id="1041-vorrangiges-prinzip">10.4.1 Vorrangiges Prinzip&lt;/h4>
&lt;p>Namen, die für den Benutzer als öffentliche Teile der API sichtbar sind, sollten Konventionen folgen, die die Verwendung und nicht die Implementierung widerspiegeln.&lt;/p>
&lt;h4 id="1042-beschreibend-benennungsstile">10.4.2 Beschreibend: Benennungsstile&lt;/h4>
&lt;p>Es gibt viele verschiedene Namensstile. Es hilft zu erkennen, welcher Namensstil verwendet wird, unabhängig davon, wofür er verwendet wird.&lt;/p>
&lt;p>Die folgenden Benennungsstile werden häufig unterschieden:&lt;/p>
&lt;ul>
&lt;li>b (single lowercase letter)&lt;/li>
&lt;li>B (single uppercase letter)&lt;/li>
&lt;li>lowercase&lt;/li>
&lt;li>lower_case_with_underscores&lt;/li>
&lt;li>UPPERCASE&lt;/li>
&lt;li>UPPER_CASE_WITH_UNDERSCORES&lt;/li>
&lt;li>CapitalizedWords (or CapWords, or CamelCase — so named because of the bumpy look of its letters). This is also sometimes known as StudlyCaps.Note: When using acronyms in CapWords, capitalize all the letters of the acronym. Thus HTTPServerError is better than HttpServerError.&lt;/li>
&lt;li>mixedCase (differs from CapitalizedWords by initial lowercase character!)&lt;/li>
&lt;li>Capitalized_Words_With_Underscores (ugly!)&lt;/li>
&lt;/ul>
&lt;p>Es gibt auch den Stil, ein kurzes eindeutiges Präfix zu verwenden, um verwandte Namen zusammenzufassen. Dies wird in Python nicht oft verwendet, wird aber der Vollständigkeit halber erwähnt. Zum Beispiel gibt die Funktion os.stat() ein Tupel zurück, dessen Elemente traditionell Namen wie st_mode, st_size, st_mtime und so weiter haben. (Dies geschieht, um die Übereinstimmung mit den Feldern der POSIX-System-Aufrufstruktur zu betonen, die Programmierern hilft, die damit vertraut sind.)&lt;/p>
&lt;p>Die X11-Bibliothek verwendet für alle ihre öffentlichen Funktionen ein führendes X. In Python wird dieser Stil allgemein als unnötig erachtet, da Attribut- und Methodennamen mit einem Objekt- und Funktionsnamen mit einem Modelnamen vorangestellt sind.&lt;/p>
&lt;p>Darüber hinaus werden folgende Sonderformen mit vor- oder nachlaufenden Unterstrichen erkannt (diese können in der Regel mit einer beliebigen Fallkonvention kombiniert werden):&lt;/p>
&lt;ul>
&lt;li>_single_leading_underscore: weak „internal use“ indicator. E.g. from M import * does not import objects whose name starts with an underscore.&lt;/li>
&lt;li>single_trailing_underscore_: used by convention to avoid conflicts with Python keyword, e.g.
&lt;ul>
&lt;li>&lt;code>Tkinter.Toplevel(master, class_='ClassName')&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>__double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, &lt;code>__boo&lt;/code> becomes &lt;code>_FooBar__boo;&lt;/code> see below).&lt;/li>
&lt;li>__double_leading_and_trailing_underscore__: „magic“ objects or attributes that live in user-controlled namespaces. E.g. &lt;code>__init__&lt;/code>, &lt;code>__import__&lt;/code> or &lt;code>__file__&lt;/code>. Never invent such names; only use them as documented.&lt;/li>
&lt;/ul>
&lt;h4 id="105-verschreibend-namenskonventionen">10.5 Verschreibend: Namenskonventionen&lt;/h4>
&lt;h5 id="1051-zu-vermeidende-namen">10.5.1 Zu vermeidende Namen&lt;/h5>
&lt;p>Benutze niemals die Zeichen ‚l‘ (Kleinbuchstabe el), ‚O‘ (Großbuchstabe oh) oder ‚I‘ (Großbuchstabe i) als einzelnes Zeichen für Variablennamen.&lt;/p>
&lt;p>In einigen Schriftarten sind diese Zeichen von den Ziffern eins und null nicht zu unterscheiden. Wenn du versucht bist, ‚l‘ zu benutzen, benutze stattdessen ‚L‘.&lt;/p>
&lt;h5 id="1052-ascii-kompatibilität">10.5.2 ASCII-Kompatibilität&lt;/h5>
&lt;p>Die in der Standardbibliothek verwendeten Bezeichner müssen ASCII-kompatibel sein, wie im Richtlinienabschnitt von &lt;a href="https://www.python.org/dev/peps/pep-3131/">PEP 3131&lt;/a> beschrieben.&lt;/p>
&lt;h5 id="1053-paket--und-modulnamen">10.5.3 Paket- und Modulnamen&lt;/h5>
&lt;p>Module sollten kurze, klein geschriebene Namen haben. Unterstriche können im Modulnamen verwendet werden, wenn sie die Lesbarkeit verbessern. Python-Pakete sollten auch kurze, ausschließlich klein geschriebene Namen haben, allerdings wird die Verwendung von Unterstrichen abgeraten.&lt;/p>
&lt;p>Wenn ein in C oder C++ geschriebenes Erweiterungsmodul ein zugehöriges Python-Modul hat, das eine höherwertige (z.B. mehr objektorientierte) Schnittstelle bereitstellt, hat das C/C++-Modul einen führenden Unterstrich (z.B. _socket).&lt;/p>
&lt;h5 id="klassennamen">10.5.3 Klassennamen&lt;/h5>
&lt;p>Klassennamen sollten normalerweise die CapWords-Konvention verwenden.&lt;/p>
&lt;p>Die Namenskonvention für Funktionen kann stattdessen in Fällen verwendet werden, in denen die Schnittstelle dokumentiert und primär als Aufrufer verwendet wird.&lt;/p>
&lt;p>Es gibt eine separate Konvention für eingebaute Namen: Die meisten integrierten Namen sind einzelne Wörter (oder zwei Wörter laufen zusammen), wobei die CapWords-Konvention nur für Ausnahmenamen und eingebaute Konstanten verwendet wird.&lt;/p>
&lt;h5 id="1054-typ-variablenbezeichnungen">10.5.4 Typ Variablenbezeichnungen&lt;/h5>
&lt;p>Namen von Typvariablen, die in &lt;a href="https://www.python.org/dev/peps/pep-3131/">PEP 484&lt;/a> eingeführt werden, sollten normalerweise CapWords verwenden, die kurze Namen bevorzugen: T, AnyStr, Num. Es wird empfohlen, den Variablen, die zur Deklaration von Kovarianten- oder Kontravariantenverhalten verwendet werden, die Suffixe _co oder _contra hinzuzufügen:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a2f;font-weight:bold">from&lt;/span> &lt;span style="color:#00f;font-weight:bold">typing&lt;/span> &lt;span style="color:#a2f;font-weight:bold">import&lt;/span> TypeVar
VT_co &lt;span style="color:#666">=&lt;/span> TypeVar(&lt;span style="color:#b44">&amp;#39;VT_co&amp;#39;&lt;/span>, covariant&lt;span style="color:#666">=&lt;/span>True)
KT_contra &lt;span style="color:#666">=&lt;/span> TypeVar(&lt;span style="color:#b44">&amp;#39;KT_contra&amp;#39;&lt;/span>, contravariant&lt;span style="color:#666">=&lt;/span>True)
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="1055-namen-exceptions">10.5.5 Namen Exceptions&lt;/h5>
&lt;p>Da Ausnahmen Klassen sein sollten, gilt hier die Namenskonvention der Klasse. Sie sollten jedoch das Suffix „Error“ für Ihre Exception-Namen verwenden (wenn die Exception tatsächlich ein Fehler ist).&lt;/p>
&lt;h5 id="1056-globale-variablennamen">10.5.6 Globale Variablennamen&lt;/h5>
&lt;p>(Hoffentlich sind diese Variablen nur für die Verwendung innerhalb eines Moduls gedacht.) Die Konventionen sind etwa die gleichen wie bei Funktionen.&lt;/p>
&lt;p>Module, die für die Verwendung über den M-Import * konzipiert sind, sollten den &lt;strong>all&lt;/strong>-Mechanismus verwenden, um den Export von Globals zu verhindern, oder die ältere Konvention verwenden, solche Globals mit einem Unterstrich zu versehen (was man tun sollte, um anzuzeigen, dass diese Globals „module non-public“ sind).&lt;/p>
&lt;h5 id="1057-funktions--und-variablennamen">10.5.7 Funktions- und Variablennamen&lt;/h5>
&lt;p>Funktionsnamen sollten klein geschrieben sein, wobei die Wörter durch Unterstriche getrennt sein sollten, um die Lesbarkeit zu verbessern.&lt;/p>
&lt;p>Variablennamen folgen der gleichen Konvention wie Funktionsnamen.&lt;/p>
&lt;p>mixedCase ist nur in Kontexten erlaubt, in denen dies bereits der vorherrschende Stil ist (z.B. threading.py), um die Abwärtskompatibilität zu erhalten.&lt;/p>
&lt;h5 id="1058-funktions--und-methodenargumente">10.5.8 Funktions- und Methodenargumente&lt;/h5>
&lt;p>Benutze immer &lt;code>self&lt;/code> für das erste Argument, um Methoden zu instanziieren.&lt;/p>
&lt;p>Verwende immer &lt;code>cls&lt;/code> für das erste Argument von Klassenmethoden.&lt;/p>
&lt;p>Wenn der Name eines Funktionsarguments mit einem reservierten Schlüsselwort kollidiert, ist es im Allgemeinen besser, einen einzelnen nachlaufenden Unterstrich anzuhängen, als eine Abkürzung oder Rechtschreibfehler zu verwenden. Somit ist class_ besser als clss. (Vielleicht ist es besser, solche Konflikte zu vermeiden, indem man ein Synonym verwendet.)&lt;/p>
&lt;h5 id="1059-methodennamen-und-instanzvariablen">10.5.9 Methodennamen und Instanzvariablen&lt;/h5>
&lt;p>Zur besseren Lesbarkeit sollte die Funktion Benennungsregeln verwendet werden: Kleinbuchstaben mit Wörtern, die bei Bedarf durch Unterstriche getrennt sind.&lt;/p>
&lt;p>Benutze nur einen führenden Unterstrich für nicht-öffentliche Methoden und Instanzvariablen.&lt;/p>
&lt;p>Um Namenskonflikte mit Unterklassen zu vermeiden, sollten Sie zwei führende Unterstriche verwenden, um Pythons Regeln zur Namensverzerrung aufzurufen.&lt;/p>
&lt;p>Python vermischt diese Namen mit dem Klassennamen: Wenn die Klasse Foo ein Attribut namens __a hat, kann sie nicht von Foo.__a aufgerufen werden. (Ein hartnäckiger Benutzer könnte immer noch Zugriff erhalten, indem er Foo._Foo__a aufruft.) Im Allgemeinen sollten doppelt führende Unterstriche nur verwendet werden, um Namenskonflikte mit Attributen in Klassen zu vermeiden, die zur Unterklasse gehören.&lt;/p>
&lt;p>Hinweis: Es gibt einige Kontroversen über die Verwendung von __Namen (siehe unten).&lt;/p>
&lt;h5 id="10510-konstanten">10.5.10 Konstanten&lt;/h5>
&lt;p>Konstanten werden in der Regel auf Modulebene definiert und in Großbuchstaben mit unterstrichenen Trennwörtern geschrieben. Beispiele sind &lt;code>MAX_OVERFLOW&lt;/code> und &lt;code>TOTAL&lt;/code>.&lt;/p>
&lt;h2 id="abschließend">Abschließend&lt;/h2>
&lt;p>Die restlichen Informationen aus PEP 8 werden in einem separatem Post beschrieben, da diese, meiner Meinung nach, einen eigenen Post verdient haben. Dort geht es hauptsächlich um generelle „Programmier-Empfehlungen“.&lt;/p>
&lt;p>Wer die volle Version von PEP 8 in englischer Sprache lesen möchte, der kann direkt zu den &lt;a href="https://www.python.org/dev/peps/pep-0008/">Python PEPs&lt;/a> es ist immer schön das Original zu lesen.&lt;/p>
- https://zrezai-dev.de/python/pep-8/ -</description></item><item><title>Impressum</title><link>https://zrezai-dev.de/impressum/</link><pubDate>Wed, 13 Feb 2019 11:42:47 +0000</pubDate><guid>https://zrezai-dev.de/impressum/</guid><description>Zadjad Rezai. https://zrezai-dev.de/impressum/ -&lt;h1 id="impressum">Impressum&lt;/h1>
&lt;/p>
&lt;h2 id="impressum-1">Impressum&lt;/h2>
&lt;p>Inhaltlich verantwortlich i.S.d. § 55 Abs. 2 RStV:&lt;/p>
&lt;div style="margin:15px;">
Zadjad Rezai&lt;br>
Sandkampweg 1&lt;br>
22111 Hamburg
&lt;/div>
&lt;p>&lt;a href="mailto:zadjad@zrezai-dev.de">zadjad@zrezai-dev.de&lt;/a>&lt;/p>
&lt;h3 id="haftungsausschluss">Haftungsausschluss&lt;/h3>
&lt;p>Die Inhalte dieser Seite wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen.&lt;/p>
&lt;p>Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei bekannt werden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.&lt;/p>
&lt;p>Haftung für Links&lt;/p>
&lt;p>Das Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar.&lt;/p>
- https://zrezai-dev.de/impressum/ -</description></item></channel></rss>